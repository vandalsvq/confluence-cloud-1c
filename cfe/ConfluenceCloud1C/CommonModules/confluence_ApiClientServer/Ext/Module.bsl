
#Область ПрограммныйИнтерфейс_Общий
 
// Возвращает структуру настроек подключения
//
// Параметры:
//	ДанныеСервера	- Строка, Структура
//		Строка		- адрес сервера для получения структуры параметров подключения
//		Структура	- см. confluence_ИнтеграцияКлиентСерверПовтИсп.ПараметрыАдресаСервера
//	Логин			- Строка - логин пользователя
//	ТокенID			- Строка - токен пользователя
//
// Возвращаемое значение:
//   Структура
//		Сервер					- Строка
//		ЗащищенноеСоединение	- Булево
//		СтрокаАвторизации		- Строка
//		АдресСервераWiki		- Строка
// 
Функция get_connection_settings(знач ДанныеСервера, знач Логин = "", знач ТокенID = "") Экспорт
	ТипДанныхСервера = ТипЗнч(ДанныеСервера);
	Если ТипДанныхСервера = Тип("Строка") Тогда
		ПараметрыСервера = confluence_ApiClientServerReuse.url_params(ДанныеСервера);
	ИначеЕсли ТипДанныхСервера = Тип("Структура") Тогда
		ПараметрыСервера = ДанныеСервера;
	Иначе 
		ВызватьИсключение НСтр("ru='Параметр ""ДанныеСервера"" передан неверно. Обратитесь к разработчику.'");
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Логин) Тогда
		ДанныеАвторизации = СтрШаблон("%1:%2",
			Логин,
			ТокенID);
		СтрокаАвторизации = СтрокаВBase64(ДанныеАвторизации);
	Иначе 
		СтрокаАвторизации = "";
	КонецЕсли;
	
	Настройки = Новый Структура;
	Настройки.Вставить("Сервер"					, ПараметрыСервера.СерверHTTP);
	Настройки.Вставить("ЗащищенноеСоединение"	, ПараметрыСервера.ЗащищенноеСоединение);
	Настройки.Вставить("СтрокаАвторизации"		, СтрокаАвторизации);
	Настройки.Вставить("АдресСервераWiki"		, ПараметрыСервера.АдресСервераWiki);
	
	Возврат Настройки;
КонецФункции

// Выполняет проверку структуры на принадлженость к ошибке. Возвращает признак,
// что переданная структура - это описание ошибки. При необходимости выводит
// сообщение пользователю с текстом ошибки
//
// Параметры:
//	Структура			- Структура
//	СообщениеИсключение	- Булево - если значение не булево, ничего не происходит
//		Истина	- выводить сообщение
//		Ложь	- вызвать исключение
//
// Возвращаемое значение:
//   Булево
// 
Функция check_error(знач Структура, знач СообщениеИсключение = Неопределено) Экспорт 
	ТипСтруктуры = СвойствоСтруктуры(Структура, "type", "");
	
	ЭтоОшибка = (ТипСтруктуры = "error");
	Если НЕ ЭтоОшибка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДопТекст = СокрЛП(Структура.ДопТекст);
	Если НЕ ПустаяСтрока(ДопТекст) Тогда
		Если НЕ СтрЗаканчиваетсяНа(ДопТекст, ".") Тогда
			ДопТекст = ДопТекст + ".";
		КонецЕсли;
		ДопТекст = ДопТекст + " ";
	КонецЕсли;
	
	ТекстОшибки = СтрШаблон(НСтр("ru='%1Код ошибки: %2 (%3)'"),
		ДопТекст,
		Строка(Структура.Код),
		СокрЛП(Структура.Текст));
		
	Если СообщениеИсключение = Истина Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	ИначеЕсли СообщениеИсключение = Ложь Тогда
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПолучениеДанных

// Возвращает все пространства. Список упорядочен в алфавитном порядке в порядке возрастания по ключу
//
// Параметры:
//	Настройки			- Структура - см. get_connection_settings
//	ПараметрыЗапроса	- Структура	- см. get_all_spaces_params
//
// Возвращаемое значение:
//   Структура - type = spacearray
// 
Функция get_all_spaces(знач Настройки, знач ПараметрыЗапроса = Неопределено) Экспорт
	СтрокаПараметры = ПараметрыЗапроса_get_all_spaces(ПараметрыЗапроса);
	
	ТекстЗапроса = "/wiki/rest/api/space?" + СтрокаПараметры;
	
	#Область ЗапросHTTP
	ЗаголовкиHTTP	= ПолучитьЗаголовки(Настройки);
	ЗапросHTTP		= Новый HTTPЗапрос(ТекстЗапроса, ЗаголовкиHTTP);
	СоединениеHTTP	= ПолучитьСоединениеHTTP(Настройки);
	#КонецОбласти 
	
	ОтветHTTP = СоединениеHTTP.Получить(ЗапросHTTP);
	Если ОтветHTTP.КодСостояния <> 200 Тогда
		Возврат Структура_error(ОтветHTTP, НСтр("ru='Получение всех пространств.'"));
	КонецЕсли;
	
	ДанныеОтвета = СоответствиеИзОтвета(ОтветHTTP);
	Возврат Структура_spacearray(ДанныеОтвета, Настройки);
КонецФункции

// Возвращает все страницы из пространства
//
// Параметры:
//	Настройки			- Структура - см. get_connection_settings
//	КлючПространства	- Строка - ключ пространства (Структура_space.Ключ)
//	ПараметрыЗапроса	- Структура - см. get_all_pages_from_space_params
//
// Возвращаемое значение:
//   ТипВид - описание возвращаемого значения
// 
Функция get_all_pages_from_space(знач Настройки, знач КлючПространства, знач ПараметрыЗапроса = Неопределено) Экспорт
КонецФункции

#КонецОбласти
 
#Область ПрограммныйИнтерфейс_Дополнительно

// Возвращает структуру параметров для получения списка разделов
//
// Возвращаемое значение:
//   Структура
//		Общие		- Булево - признак получения общих или персональных пространств 
//			Истина	- общие (global)
//			Ложь	- персональные (personal)
//			Неопределено - все
//		Действующие	- Булево
//			Истина - действующие (current)
//			Ложь - архивные (archived)
//			Неопределено - все
//		Метка		- Строка - поиск пространства по метке
//		Избранное	- Булево - получать избранные или все пространства
//			Истина	- только избранные
//			Ложь	- все пространства
//		Начало		- Число - начальный номер пространства
//		Количество	- Число - количество пространств на страницу запроса
//		Информация	- Строка - список дополнительной информации пространств 
//			settings, metadata.labels, operations, lookAndFeel, permissions, icon, description.plain, description.view, theme, homepage
// 
Функция get_all_spaces_params(знач Начало = 0, знач Количество = 25) Экспорт
	Структура = Новый Структура;
	Структура.Вставить("Общие"			, Неопределено);
	Структура.Вставить("Действующие"	, Неопределено);
	Структура.Вставить("Метка"			, "");
	Структура.Вставить("Избранное"		, Ложь);
	Структура.Вставить("Начало"			, Начало);
	Структура.Вставить("Количество"		, Количество);
	Структура.Вставить("Информация"		, "description.view,metadata.labels,homepage");
	
	Возврат Структура; 
КонецФункции

// Возвращает структуру параметров для получения списка страниц по разделу
//
// Возвращаемое значение:
//   Структура
//		Статус		- Строка - статус для отбора, не обязательно
//			Удалена, Текущая, Любой
//		Начало		- Число - начальный номер пространства
//		Количество	- Число - количество пространств на страницу запроса
//		Информация	- Строка - список дополнительной информации пространств 
//			childTypes.all, childTypes.attachment, childTypes.comment, childTypes.page, container, metadata.currentuser,
//			metadata.properties, metadata.labels, metadata.frontend, operations, children.page, children.attachment,
//			children.comment, restrictions.read.restrictions.user, restrictions.read.restrictions.group,
//			restrictions.update.restrictions.user, restrictions.update.restrictions.group, history, history.lastUpdated,
//			history.previousVersion, history.contributors, history.nextVersion, ancestors, body, version, descendants.page,
//			descendants.attachment, descendants.comment, space
// 
Функция get_all_pages_from_space_params(знач Начало = 0, знач Количество = 25) Экспорт
	Структура = Новый Структура;
	Структура.Вставить("Статус"			, "");
	Структура.Вставить("Начало"			, Начало);
	Структура.Вставить("Количество"		, Количество);
	Структура.Вставить("Информация"		, "description.view,metadata.labels,version,body.storage,ancestors");
КонецФункции

// Возвращает параметры поиска
//
// Возвращаемое значение:
//   Структура
//		type			- Строка - searchparams
//		Начало			- Число - начальная строка выборки (нумерация начинается с 1)
//		Размер			- Число - размер выборки
//		Архив			- Булево - искать в архивных пространствах
//		РежимОтладки	- Булево - во время режима отладки выводится текст запроса для поиска
// 
Функция search_params(знач Начало = 1, знач Размер = 25, знач Архив = Ложь) Экспорт
	Структура = Новый Структура;
	Структура.Вставить("type"	, "searchparams");
	Структура.Вставить("Начало"	, Начало);
	Структура.Вставить("Размер"	, Размер);
	Структура.Вставить("Архив"	, Архив);
	
	Структура.Вставить("РежимОтладки", Ложь);

	Возврат Структура;
КонецФункции

#КонецОбласти
 
#Область СтруктурыДанных

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие - Соответствие
//
// Возвращаемое значение:
//	Структура: type = userdata
//		Имя				- Строка
//		Ключ			- Строка
//		Тип				- Строка - known, unknown, anonymous, user
//		АдресEMail		- Строка
//		КраткоеИмя		- Строка
//		ПолноеИмя		- Строка
//		Аккаунт			- Структура
//			Идентификатор	- Строка
//			Тип				- Строка - atlassian, app
//
Функция Структура_userdata(знач Соответствие)
	СтруктураАккаунт = Новый Структура;
	СтруктураАккаунт.Вставить("Идентификатор"	, СвойствоСоответствия(Соответствие, "accountId", ""));
	СтруктураАккаунт.Вставить("Тип"				, СвойствоСоответствия(Соответствие, "accountType", ""));
	
	Результат = Новый Структура;
	Результат.Вставить("type"				, "userdata");
	Результат.Вставить("Имя"				, СвойствоСоответствия(Соответствие, "username", ""));
	Результат.Вставить("Ключ"				, СвойствоСоответствия(Соответствие, "userKey", ""));
	Результат.Вставить("Тип"				, СвойствоСоответствия(Соответствие, "type", ""));
	Результат.Вставить("АдресEMail"			, СвойствоСоответствия(Соответствие, "email", ""));
	Результат.Вставить("КраткоеИмя"			, СвойствоСоответствия(Соответствие, "publicName", ""));
	Результат.Вставить("ПолноеИмя"			, СвойствоСоответствия(Соответствие, "displayName", "")); 
	Результат.Вставить("Аккаунт"			, СтруктураАккаунт);
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие - Соответствие
//
// Возвращаемое значение:
//	Структура: type = version
//		Пользователь	- Структура - type = userdata
//		ДатаИзменения	- Дата
//		Описание		- Строка
//		Номер			- Число
//		НеСущественное	- Булево
//
Функция Структура_version(знач Соответствие)
	ДанныеПользователь = СвойствоСоответствия(Соответствие, "by", Новый Соответствие);
	
	СтруктураПользователь = Структура_userdata(ДанныеПользователь);
	
	Результат = Новый Структура;
	Результат.Вставить("type"				, "version");
	Результат.Вставить("Пользователь"		, СтруктураПользователь);
	Результат.Вставить("ДатаИзменения"		, ДатаИзЗначения(Соответствие, "when"));
	Результат.Вставить("Описание"			, СвойствоСоответствия(Соответствие, "message", ""));
	Результат.Вставить("Номер"				, ЧислоИзЗначения(Соответствие, "number"));
	Результат.Вставить("НеСущественное"		, БулевоИзЗначения(Соответствие, "minorEdit"));
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие - Соответствие
//
// Возвращаемое значение:
//	Структура: type = space
//		Идентификатор		- Строка
//		Ключ				- Строка
//		Наименование		- Строка
//		Описание			- Строка
//		ДомашняяСтраница	- Структура - type = content
//		Общее				- Булево
//		Действующее			- Булево
//		Метки				- Массив
//			Префикс			- Строка
//			Представление	- Строка
//			Идентификатор	- Строка
//			Метка			- Строка
//
Функция Структура_space(знач Соответствие, знач Настройки)
	ТипПространства			= СвойствоСоответствия(Соответствие, "type", "");
	СтатусПространства		= СвойствоСоответствия(Соответствие, "status", "");
	ОписаниеПространства	= СвойствоСоответствия(Соответствие, "description/view/value", "");
	МеткиПространства		= СвойствоСоответствия(Соответствие, "metadata/labels/results", Новый Массив);
	ДомашняяСтраница		= СвойствоСоответствия(Соответствие, "homepage", Неопределено);
	
	МассивМетки = Новый Массив;
	Для Каждого СоответствиеМетки Из МеткиПространства Цикл
		СтруктураМетки = Новый Структура;
		СтруктураМетки.Вставить("Префикс"		, СвойствоСоответствия(СоответствиеМетки, "prefix", ""));
		СтруктураМетки.Вставить("Представление"	, СвойствоСоответствия(СоответствиеМетки, "name", ""));
		СтруктураМетки.Вставить("Идентификатор"	, СвойствоСоответствия(СоответствиеМетки, "id", ""));
		СтруктураМетки.Вставить("Метка"			, СвойствоСоответствия(СоответствиеМетки, "label", ""));
		
		МассивМетки.Добавить(СтруктураМетки);
	КонецЦикла;
	
	Если ДомашняяСтраница <> Неопределено Тогда
		СтруктураДомашняяСтраница = Структура_content(ДомашняяСтраница, Настройки);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("type"				, "space");
	Результат.Вставить("Идентификатор"		, СвойствоСоответствия(Соответствие, "id", ""));
	Результат.Вставить("Ключ"				, СвойствоСоответствия(Соответствие, "key", ""));
	Результат.Вставить("Наименование"		, СвойствоСоответствия(Соответствие, "name", ""));
	Результат.Вставить("Описание"			, ЗаменитьСпецСимволыHTML(ОписаниеПространства));
	Результат.Вставить("ДомашняяСтраница"	, СтруктураДомашняяСтраница);
	Результат.Вставить("Общее"				, (ТипПространства = "global"));
	Результат.Вставить("Действующее"		, (СтатусПространства = "current"));
	Результат.Вставить("Метки"				, МассивМетки);
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие - Соответствие
//
// Возвращаемое значение:
//	Структура: type = spacearray
//		Значения		- Массив
//			Элемент массива Структура: type = space
//		Начало			- Число
//		Ограничение		- Число
//		РазмерВыборки	- Число
//
Функция Структура_spacearray(знач Соответствие, знач Настройки)
	ДанныеРезультат = СвойствоСоответствия(Соответствие, "results", Новый Массив);
	
	МассивРезультат = Новый Массив;
	Для Каждого СоответствиеПространство Из ДанныеРезультат Цикл
		СтруктураПространство = Структура_space(СоответствиеПространство, Настройки);
		МассивРезультат.Добавить(СтруктураПространство);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("type"				, "spacearray");
	Результат.Вставить("Значения"			, МассивРезультат);
	Результат.Вставить("Начало"				, ЧислоИзЗначения(Соответствие, "start"));
	Результат.Вставить("Ограничение"		, ЧислоИзЗначения(Соответствие, "limit"));
	Результат.Вставить("РазмерВыборки"		, ЧислоИзЗначения(Соответствие, "size"));
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие	- Соответствие
//	Настройки		- Структура - см. ИнтеграцияConfluenceВызовСервера.НастройкиПодключения
//
// Возвращаемое значение:
//	Структура: type = content
//		Идентификатор	- Строка
//		ТипДанных		- ПеречислениеСсылка.ТипыДанныхConfluence
//		Заголовок		- Строка
//		Статус			- Строка - статус контента
//		Ссылка			- Строка
//		Пространство	- Структура - type = space
//		Версия			- Структура - type = version
//		Ссылки			- Структура - type = links
//
Функция Структура_content(знач Соответствие, знач Настройки)
	ДанныеПространство	= СвойствоСоответствия(Соответствие, "space", Неопределено);
	ДанныеВерсия		= СвойствоСоответствия(Соответствие, "version", Неопределено);
	ДанныеСсылки		= СвойствоСоответствия(Соответствие, "_links", Неопределено);
	
	Если ДанныеПространство <> Неопределено Тогда
		СтруктураПространство = Структура_space(ДанныеПространство, Настройки);
	КонецЕсли;
	Если ДанныеВерсия <> Неопределено Тогда
		СтруктураВерсия = Структура_version(ДанныеВерсия);
	КонецЕсли;
	Если ДанныеСсылки <> Неопределено Тогда
		СтруктураСсылки = Структура_links(ДанныеСсылки);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("type"				, "content");
	Результат.Вставить("Идентификатор"		, СвойствоСоответствия(Соответствие, "id", ""));
	Результат.Вставить("ТипДанных"			, ТипДанныхИзЗначения(Соответствие, "type"));
	Результат.Вставить("Статус"				, СвойствоСоответствия(Соответствие, "status", ""));
	Результат.Вставить("Заголовок"			, СвойствоСоответствия(Соответствие, "title", ""));
	Результат.Вставить("Ссылка"				, АдресСсылкиИзЗначения(Соответствие, "url", Настройки.АдресСервераWiki));
	Результат.Вставить("Пространство"		, СтруктураПространство);
	Результат.Вставить("Версия"				, СтруктураВерсия);
	Результат.Вставить("Ссылки"				, СтруктураСсылки);
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие	- Соответствие
//	Настройки		- Структура - см. ИнтеграцияConfluenceВызовСервера.НастройкиПодключения
//
// Возвращаемое значение:
//	Структура: type = searchresult
//		Значения		- Массив - type = space
//			Контент			- Структура - type = content
//				Только свойства: Идентификатор, ТипДанных, Статус, Заголовок, Ссылки
//			Пространство	- Структура
//				Заголовок	- Строка
//				Ссылка		- Строка
//			Заголовок		- ФорматированнаяСтрока, Строка
//			Описание		- ФорматированнаяСтрока, Строка
//			Ссылка			- Строка
//			Навигация		- Массив - элемент Структура type = breadcrumb
//			ТипДанных		- ПеречислениеСсылка.ТипыДанныхConfluence
//			Обновлено		- Дата - дата (с временем) обновления
//		Начало			- Число - номер строки выборки (нумерация начинается с 0)
//		Ограничение		- Число - количество строк запроса (ПараметрыПоиска.Размер)
//		РазмерВыборки	- Число - количество строк в выборке
//		ВсегоКоличество	- Число - всего найденных строк
//		СтрокаЗапроса	- Строка - строка запроса для повторного выполнения
//		ВремяПоиска		- Число - время выполнения запроса
//
Функция Структура_searchresult(знач Соответствие, знач Настройки)
	ДанныеРезультат = СвойствоСоответствия(Соответствие, "results", Новый Массив);
	ДанныеСсылки	= СвойствоСоответствия(Соответствие, "_links", Новый Соответствие);
	
	МассивРезультат = Новый Массив;
	Для Каждого СоответствиеРезультат Из ДанныеРезультат Цикл
		ДанныеКонтента		= СвойствоСоответствия(СоответствиеРезультат, "content", Новый Соответствие);
		ДанныеПространства	= СвойствоСоответствия(СоответствиеРезультат, "resultGlobalContainer", Новый Соответствие);
		ДанныеНавигация		= СвойствоСоответствия(СоответствиеРезультат, "breadcrumbs", Новый Массив);
		
		СтруктураПространство = Новый Структура;
		СтруктураПространство.Вставить("Заголовок"	, СвойствоСоответствия(ДанныеПространства, "title", ""));
		СтруктураПространство.Вставить("Ссылка"		, АдресСсылкиИзЗначения(ДанныеПространства, "displayUrl", Настройки.АдресСервераWiki));
		
		ЗначениеЗаголовок	= СвойствоСоответствия(СоответствиеРезультат, "title", "");
		ЗначениеОписание	= СвойствоСоответствия(СоответствиеРезультат, "excerpt", "");
		МассивНавигация		= Массив_breadcrumbs(ДанныеНавигация);
		
		СтруктураКонтент = Структура_content(ДанныеКонтента, Настройки);
		СтруктураКонтент.Ссылки.Основа = СвойствоСоответствия(ДанныеСсылки, "base", "");
		
		СтруктураЗначение = Новый Структура;
		СтруктураЗначение.Вставить("Контент"		, СтруктураКонтент);
		СтруктураЗначение.Вставить("Пространство"	, СтруктураПространство);
		СтруктураЗначение.Вставить("Заголовок"		, ФорматироватьСтроку(ЗначениеЗаголовок));
		СтруктураЗначение.Вставить("Описание"		, ФорматироватьСтроку(ЗначениеОписание));
		СтруктураЗначение.Вставить("Ссылка"			, АдресСсылкиИзЗначения(СоответствиеРезультат, "url", Настройки.АдресСервераWiki));
		СтруктураЗначение.Вставить("Навигация"		, МассивНавигация); 
		СтруктураЗначение.Вставить("ТипДанных"		, ТипДанныхИзЗначения(СоответствиеРезультат, "entityType"));
		СтруктураЗначение.Вставить("Обновлено"		, ДатаИзЗначения(СоответствиеРезультат, "lastModified"));
		
		МассивРезультат.Добавить(СтруктураЗначение);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("type"				, "searchresult");
	Результат.Вставить("Значения"			, МассивРезультат);
	Результат.Вставить("Начало"				, ЧислоИзЗначения(Соответствие, "start"));
	Результат.Вставить("Ограничение"		, ЧислоИзЗначения(Соответствие, "limit"));
	Результат.Вставить("РазмерВыборки"		, ЧислоИзЗначения(Соответствие, "size"));
	Результат.Вставить("ВсегоКоличество"	, ЧислоИзЗначения(Соответствие, "totalSize"));
	Результат.Вставить("СтрокаЗапроса"		, СвойствоСоответствия(Соответствие, "cqlQuery", ""));
	Результат.Вставить("ВремяПоиска"		, ЧислоИзЗначения(Соответствие, "searchDuration"));
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие - Соответствие
//
// Возвращаемое значение:
//	Структура: type = versions
//		Значения		- Массив - type = version
//		Начало			- Число - номер строки выборки
//		Ограничение		- Число - количество строк запроса
//		РазмерВыборки	- Число - количество строк в выборке
//
Функция Структура_versions(знач Соответствие)
	ДанныеРезультат = СвойствоСоответствия(Соответствие, "results", Новый Массив);
	
	МассивРезультат = Новый Массив;
	Для Каждого СоответствиеРезультат Из ДанныеРезультат Цикл
		СтруктураВерсия = Структура_version(СоответствиеРезультат);
		МассивРезультат.Добавить(СтруктураВерсия);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("type"				, "versions");
	Результат.Вставить("Значения"			, МассивРезультат);
	Результат.Вставить("Начало"				, ЧислоИзЗначения(Соответствие, "start"));
	Результат.Вставить("Ограничение"		, ЧислоИзЗначения(Соответствие, "limit"));
	Результат.Вставить("РазмерВыборки"		, ЧислоИзЗначения(Соответствие, "size"));
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие - Соответствие
//
// Возвращаемое значение:
//	Структура: type = links
//		Редактирование	- Строка - ссылка для редактирования статьи (без учета основного адреса)
//		Просмотр		- Строка - ссылка для просмотра статьи (без учета основного адреса)
//		Сокращенная		- Строка - краткая ссылка для просмотра статьи (без учета основного адреса)
//		Основа			- Строка - основной адрес расположения базы знаний
//
Функция Структура_links(знач Соответствие)
	Результат = Новый Структура;
	Результат.Вставить("type"				, "links");
	Результат.Вставить("Редактирование"		, СвойствоСоответствия(Соответствие, "editui", ""));
	Результат.Вставить("Просмотр"			, СвойствоСоответствия(Соответствие, "webui", ""));
	Результат.Вставить("Сокращенная"		, СвойствоСоответствия(Соответствие, "tinyui", ""));
	Результат.Вставить("Основа"				, СвойствоСоответствия(Соответствие, "base", ""));
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данным ошибки
//
// Параметры:
//	ОтветHTTP	- HTTPОтвет
//	ДопТекст	- Строка
//
// Возвращаемое значение:
//	Структура: type = error
//		Код			- Число
//		Текст		- Строка
//		ДопТекст	- Строка
// 
Функция Структура_error(знач ОтветHTTP, знач ДопТекст = "")
	ТекстОшибки	= ОтветHTTP.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	КодОшибки	= ОтветHTTP.КодСостояния;
	
	Возврат Новый Структура("type, Код, Текст, ДопТекст",
	    "error",
		КодОшибки,
		ТекстОшибки,
		ДопТекст);
КонецФункции

// Возвращает структуру со статусом "Выполнено"
//
// Параметры:
//	ОтветHTTP	- HTTPОтвет
//	ДопТекст	- Строка
//
// Возвращаемое значение:
//	Структура: type = done
//		Код			- Число
//		ДопТекст	- Строка
// 
Функция Структура_done(знач ОтветHTTP, знач ДопТекст = "")
	КодВыполнения = ОтветHTTP.КодСостояния;
	
	Возврат Новый Структура("type, Код, ДопТекст",
	    "done",
		КодВыполнения,
		ДопТекст);
КонецФункции

// Возвращает массив с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие - Соответствие
//
// Возвращаемое значение:
//	Массив: Структура: 
//		type		= breadcrumb
//		Заголовок	- Строка
//		Ссылка		- Строка
//		Разделитель	- Строка
//
Функция Массив_breadcrumbs(знач Массив)
	МассивНавигация = Новый Массив;
	
	Для Каждого Соответствие Из Массив Цикл
		СтруктураНавигация = Новый Структура;
		СтруктураНавигация.Вставить("type"			, "breadcrumb");
		СтруктураНавигация.Вставить("Заголовок"		, СвойствоСоответствия(Соответствие, "label", ""));
		СтруктураНавигация.Вставить("Ссылка"		, СвойствоСоответствия(Соответствие, "url", ""));
		СтруктураНавигация.Вставить("Разделитель"	, СвойствоСоответствия(Соответствие, "separator", ""));
		
		МассивНавигация.Добавить(СтруктураНавигация);
	КонецЦикла;
	
	Возврат МассивНавигация;
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьПараметры(СтруктураПараметры, знач ПараметрыПоУмолчанию)
	Если НЕ ТипЗнч(СтруктураПараметры) = Тип("Структура") Тогда
		СтруктураПараметры = Новый Структура;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ПараметрыПоУмолчанию Цикл
		ЗначениеПараметра = СвойствоСтруктуры(СтруктураПараметры, КлючИЗначение.Ключ, КлючИЗначение.Значение);
		СтруктураПараметры.Вставить(КлючИЗначение.Ключ, ЗначениеПараметра);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьЗаголовки(знач Настройки)
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");
	
	Если НЕ ПустаяСтрока(Настройки.СтрокаАвторизации) Тогда 
		Заголовки.Вставить("Authorization", "Basic " + Настройки.СтрокаАвторизации);
	КонецЕсли;
	
	Возврат Заголовки;
КонецФункции

Функция ПолучитьСоединениеHTTP(знач Настройки)
	ЗащищенноеСоединение = ?(Настройки.ЗащищенноеСоединение, Новый ЗащищенноеСоединениеOpenSSL, Неопределено);
	Возврат Новый HTTPСоединение(Настройки.Сервер,,,,,, ЗащищенноеСоединение);
КонецФункции

Функция СоответствиеИзОтвета(знач ОтветHTTP)
	ТелоЗапроса = ОтветHTTP.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТелоЗапроса);
	ТекстJSON = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON = Неопределено;
	
	Возврат ТекстJSON;
КонецФункции

// Возвращает значение свойства структуры.
//
// Параметры:
//   Структура - Структура
//             - ФиксированнаяСтруктура - объект, из которого необходимо прочитать значение ключа.
//   Ключ - Строка - имя свойства структуры, для которого необходимо прочитать значение.
//   ЗначениеПоУмолчанию - Произвольный - возвращается когда в структуре нет значения по указанному
//                                        ключу.
//       Для скорости рекомендуется передавать только быстро вычисляемые значения (например примитивные типы),
//       а инициализацию более тяжелых значений выполнять после проверки полученного значения (только если это
//       требуется).
//
// Возвращаемое значение:
//   Произвольный - значение свойства структуры. ЗначениеПоУмолчанию если в структуре нет указанного свойства.
//
Функция СвойствоСтруктуры(Структура, Ключ, ЗначениеПоУмолчанию = Неопределено)
	
	Если Структура = Неопределено Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
	Результат = ЗначениеПоУмолчанию;
	Если Структура.Свойство(Ключ, Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	
КонецФункции

// Вычисляет значение из соответствия по полному пути. Актуально для получения значения
// по длинной цепочки вложенных соответствий (например из результата чтения JSON в соответствие).
//
// Например: если соответствие имеет структуру Ключ - строка, Значение - соответствие/значение
// Необходимо получить значение свойства Ключ1 > Ключ2 > Ключ3, предполагая что значением каждого
// ключа (кроме последнего) будет Соответствие. При этом если на любом этапе будет получено значение
// не типа "Соответствие" функция вернет значение параметра ПоУмолчанию. Аналогично, если на
// последнем ключе будет получено значение Неопределено
//
// Параметры:
//	Соответствие 	- Соответствие
//		Ключ - Строка - 
//		Значение - Соответствие, Произвольный
//	ПутьКСвойству 	- Строка - в качестве разделителя используется символ "/"
//	ПоУмолчанию		- Произвольный - значение возвращаемое по умолчанию, если целевое значение не получено
//
// Возвращаемое значение:
//   Произвольный
// 
Функция СвойствоСоответствия(знач Соответствие, знач ПутьКСвойству, знач ПоУмолчанию = Неопределено, знач КакЧисло = Ложь)
	МассивИмен = СтрРазделить(ПутьКСвойству, "/", Ложь);
	Для Индекс = 0 По МассивИмен.ВГраница() Цикл
		ИмяСвойства = СокрЛП(МассивИмен[Индекс]);
		
		Если Индекс = 0 Тогда
			ЗначениеСоответствия = Соответствие.Получить(ИмяСвойства);
		Иначе 
			ЗначениеСоответствия = ЗначениеСоответствия.Получить(ИмяСвойства);
		КонецЕсли;
		
		Если Индекс <> МассивИмен.ВГраница() Тогда
			ЗначениеСоответствия = ?(НЕ ТипЗнч(ЗначениеСоответствия) = Тип("Соответствие"),
				Новый Соответствие,
				ЗначениеСоответствия);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеСоответствия = Неопределено Тогда
		Возврат ПоУмолчанию;
	ИначеЕсли КакЧисло = Истина Тогда
		ЗначениеТип = ТипЗнч(ЗначениеСоответствия);
		Если ЗначениеТип = Тип("Число") Тогда
			Возврат ЗначениеСоответствия;
		ИначеЕсли ЗначениеТип = Тип("Строка") Тогда
			Возврат СтроковыеФункцииКлиентСервер.СтрокаВЧисло(ЗначениеСоответствия);
		Иначе 
			Возврат 0;
		КонецЕсли;
	Иначе 
		Возврат ЗначениеСоответствия;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПараметрыЗапроса

Функция ПараметрыЗапроса_get_all_spaces(знач ПараметрыЗапроса)
	ПараметрыПоУмолчанию = get_all_spaces_params();
	ПроверитьПараметры(ПараметрыЗапроса, ПараметрыПоУмолчанию);
	
	СтрокаПараметры		= "";
	СтрокаСоединение	= "";
	
	Если ПараметрыЗапроса.Общие = Истина Тогда
		СтрокаПараметры		= СтрокаПараметры + СтрокаСоединение + "type=global";
		СтрокаСоединение	= "&";
	ИначеЕсли ПараметрыЗапроса.Общие = Ложь Тогда
		СтрокаПараметры		= СтрокаПараметры + СтрокаСоединение + "type=personal";
		СтрокаСоединение	= "&";
	КонецЕсли;
	
	Если ПараметрыЗапроса.Действующие = Истина Тогда
		СтрокаПараметры		= СтрокаПараметры + СтрокаСоединение + "status=current";
		СтрокаСоединение	= "&";
	ИначеЕсли ПараметрыЗапроса.Действующие = Ложь Тогда
		СтрокаПараметры		= СтрокаПараметры + СтрокаСоединение + "status=archived";
		СтрокаСоединение	= "&";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыЗапроса.Метка) Тогда
		СтрокаПараметры		= СтрокаПараметры + СтрокаСоединение + "label=" + ПараметрыЗапроса.Метка;
		СтрокаСоединение	= "&";
	КонецЕсли;
	
	Если ПараметрыЗапроса.Избранное = Истина Тогда
		СтрокаПараметры		= СтрокаПараметры + СтрокаСоединение + "favourite=true";
		СтрокаСоединение	= "&";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ПараметрыЗапроса.Информация) Тогда
		СтрокаПараметры		= СтрокаПараметры + СтрокаСоединение + "expand=" + СтрЗаменить(ПараметрыЗапроса.Информация, " ", "");
		СтрокаСоединение	= "&";
	КонецЕсли;
	
	Если ПараметрыЗапроса.Начало > 0 Тогда
		СтрокаПараметры		= СтрокаПараметры + СтрокаСоединение + "start=" + Формат(ПараметрыЗапроса.Начало, "ЧН=0; ЧГ=");
		СтрокаСоединение	= "&";
	КонецЕсли;
	
	Если ПараметрыЗапроса.Количество > 0 Тогда
		СтрокаПараметры		= СтрокаПараметры + СтрокаСоединение + "limit=" + Формат(ПараметрыЗапроса.Начало, "ЧН=0; ЧГ=");
		СтрокаСоединение	= "&";
	КонецЕсли;
	
	Возврат СтрокаПараметры;
КонецФункции

Функция ПараметрыЗапроса_search(знач ПараметрыЗапроса)
	ПараметрыПоУмолчанию = search_params();
	ПроверитьПараметры(ПараметрыЗапроса, ПараметрыПоУмолчанию);
	
	Возврат СтрШаблон("&start=%1&limit=%2&includeArchivedSpaces=%3",
		ЗначениеВСтроку(ПараметрыЗапроса.Начало-1),
		ЗначениеВСтроку(ПараметрыЗапроса.Размер),
		ЗначениеВСтроку(ПараметрыЗапроса.Архив));
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПодготовкаДанных

Функция ЗаменитьСпецСимволыHTML(знач ЗначениеСтроки)
	МассивЗамен = Новый Соответствие;
	МассивЗамен.Вставить("&amp;", "&");
	МассивЗамен.Вставить("&lt;", "<");
	МассивЗамен.Вставить("&gt;", ">");
	МассивЗамен.Вставить("&quot;", """");
	МассивЗамен.Вставить("&#39;", "'");
	
	СтрИсходник = ЗначениеСтроки;
	Для Каждого КлючИЗначение Из МассивЗамен Цикл
		СтрИсходник = СтрЗаменить(СтрИсходник, КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат СтрИсходник;
КонецФункции

Функция ФорматироватьСтроку(знач ЗначениеСтроки)
	ЗначениеСтроки = ЗаменитьСпецСимволыHTML(ЗначениеСтроки);
	Если СтрНайти(ЗначениеСтроки, "@@@hl@@@") = 0 Тогда
		Возврат ЗначениеСтроки;
	КонецЕсли;
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗначениеСтроки, "@@@hl@@@", Истина, Ложь);
	
	МассивПредставление = Новый Массив;
	Для Каждого Подстрока Из МассивПодстрок Цикл
		СтрОкончание	= СтрНайти(Подстрока, "@@@endhl@@@");
		НачалоСтроки	= Лев(Подстрока, СтрОкончание-1);
		ОстатокСтроки	= СтрЗаменить(Сред(Подстрока, СтрОкончание), "@@@endhl@@@", "");
		
		Если СтрОкончание > 0 Тогда
			МассивПредставление.Добавить(Новый ФорматированнаяСтрока(НачалоСтроки, Новый Шрифт(,, Истина)));
		Иначе
			МассивПредставление.Добавить(НачалоСтроки);
		КонецЕсли;
		
		МассивПредставление.Добавить(ОстатокСтроки);
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(МассивПредставление);
КонецФункции

Функция ЗначениеВСтроку(знач ЗначениеСравнения)
	ТипЗначенияСравнения = ТипЗнч(ЗначениеСравнения);
	Если ТипЗначенияСравнения = Тип("Строка") Тогда
		Возврат """" + ЗначениеСравнения + """";
	ИначеЕсли ТипЗначенияСравнения = Тип("Массив") ИЛИ ТипЗначенияСравнения = Тип("ФиксированныйМассив") Тогда  
		СтрРезультат = "";
		Для Каждого ЗначениеМассива Из ЗначениеСравнения Цикл
			СтрРезультат = СтрРезультат + ?(ПустаяСтрока(СтрРезультат), "", ", ") + ЗначениеВСтроку(ЗначениеМассива);
		КонецЦикла;
		
		Возврат СтрРезультат;
	ИначеЕсли ТипЗначенияСравнения = Тип("СписокЗначений") Тогда  
		СтрРезультат = "";
		Для Каждого ЭлементСписка Из ЗначениеСравнения Цикл
			СтрРезультат = СтрРезультат + ?(ПустаяСтрока(СтрРезультат), "", ", ") + ЗначениеВСтроку(ЭлементСписка.Значение);
		КонецЦикла;
		
		Возврат СтрРезультат;
	ИначеЕсли ТипЗначенияСравнения = Тип("Число") Тогда  
		Возврат Формат(ЗначениеСравнения, "ЧН=0; ЧГ=");
	ИначеЕсли ТипЗначенияСравнения = Тип("Дата") Тогда  
		Возврат """" + Формат(ЗначениеСравнения, "ДФ='yyyy/MM/dd HH:mm'") + """";
	ИначеЕсли ТипЗначенияСравнения = Тип("Булево") Тогда
		Возврат Формат(ЗначениеСравнения, "БЛ=false; БИ=true");
	ИначеЕсли ТипЗначенияСравнения = Тип("ПеречислениеСсылка.confluence_ТипыДанных") Тогда
		Возврат ПредставлениеТипаДанныхПоСсылке(ЗначениеСравнения);
	Иначе
		Попытка
			Возврат Строка(ЗначениеСравнения);
		Исключение
			ВызватьИсключение СтрШаблон(НСтр("ru='Тип данных ""%1"" не поддерживается.'"), Строка(ТипЗначенияСравнения));
		КонецПопытки;
	КонецЕсли;
КонецФункции

Функция ПредставлениеТипаДанныхПоСсылке(знач ТипДанных)
	Если ТипДанных = ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.Статья") Тогда
		Возврат "page";
	ИначеЕсли ТипДанных = ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.ЗаписьБлога") Тогда
		Возврат "blogpost";
	ИначеЕсли ТипДанных = ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.Комментарий") Тогда
		Возврат "comment";
	ИначеЕсли ТипДанных = ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.Вложение") Тогда
		Возврат "attachment";
	ИначеЕсли ТипДанных = ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.Пространство") Тогда
		Возврат "space";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция СтатусВСтроку(знач Статус)
	НРегСтатус = НРег(Статус);
	Если НРегСтатус = "удалена" Тогда
		СтрокаСтатус = "trashed";
	ИначеЕсли НРегСтатус = "устарела" Тогда
		СтрокаСтатус = "historical";
	ИначеЕсли НРегСтатус = "черновик" Тогда
		СтрокаСтатус = "draft";
	ИначеЕсли НРегСтатус = "текущая" Тогда
		СтрокаСтатус = "current";
	ИначеЕсли НРегСтатус = "любой" Тогда
		СтрокаСтатус = "any";
	Иначе
		СтрокаСтатус = "";
	КонецЕсли;
	
	Возврат СтрокаСтатус;
КонецФункции
	
Функция ДатаИзЗначения(знач Соответствие, знач ПутьКлюча)
	ЗначениеСвойства = СвойствоСоответствия(Соответствие, ПутьКлюча, Неопределено);
	Если ЗначениеСвойства = Неопределено Тогда
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
	// "yyyy/MM/dd HH:mm" "yyyy-MM-dd HH:mm" "yyyy/MM/dd" "yyyy-MM-dd"
	ЗначГод		= СтрокаВЧисло(Сред(ЗначениеСвойства, 1, 4));
	ЗначМесяц	= СтрокаВЧисло(Сред(ЗначениеСвойства, 6, 2));
	ЗначДата		= СтрокаВЧисло(Сред(ЗначениеСвойства, 9, 2));
	ЗначЧас		= СтрокаВЧисло(Сред(ЗначениеСвойства, 12, 2));
	ЗначМин		= СтрокаВЧисло(Сред(ЗначениеСвойства, 15, 2));
	
	Возврат Дата(ЗначГод, ЗначМесяц, ЗначДата, ЗначЧас, ЗначМин, 0);
КонецФункции

Функция ЧислоИзЗначения(знач Соответствие, знач ПутьКлюча)
	ЗначениеСвойства = СвойствоСоответствия(Соответствие, ПутьКлюча, Неопределено);
	Если ЗначениеСвойства = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат СтрокаВЧисло(ЗначениеСвойства);
КонецФункции

Функция БулевоИзЗначения(знач Соответствие, знач ПутьКлюча)
	ЗначениеСвойства = СвойствоСоответствия(Соответствие, ПутьКлюча, Неопределено);
	Если ЗначениеСвойства = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ?(ЗначениеСвойства = "true", Истина, Ложь);
КонецФункции

Функция ТипДанныхИзЗначения(знач Соответствие, знач ПутьКлюча)
	ЗначениеСвойства = СвойствоСоответствия(Соответствие, ПутьКлюча, Неопределено);
	Если ЗначениеСвойства = Неопределено Тогда
		Возврат ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.ПустаяСсылка");
	КонецЕсли;
	
	НРегЗначениеСвойства = НРег(ЗначениеСвойства);
	Если НРегЗначениеСвойства = "page" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.Статья");
	ИначеЕсли НРегЗначениеСвойства = "blogpost" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.ЗаписьБлога");
	ИначеЕсли НРегЗначениеСвойства = "comment" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.Комментарий");
	ИначеЕсли НРегЗначениеСвойства = "attachment" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.Вложение");
	ИначеЕсли НРегЗначениеСвойства = "space" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.Пространство");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.ПустаяСсылка");
	КонецЕсли;
КонецФункции

Функция АдресСсылкиИзЗначения(знач Соответствие, знач ПутьКлюча, знач ПутьКСерверу)
	ЗначениеСвойства = СвойствоСоответствия(Соответствие, ПутьКлюча, Неопределено);
	Если ЗначениеСвойства = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	БезРазделителя = (СтрЗаканчиваетсяНа(ПутьКСерверу, "/") ИЛИ СтрНачинаетсяС(ЗначениеСвойства, "/"));
	
	Возврат ПутьКСерверу + ?(БезРазделителя, "", "/") + ЗначениеСвойства;
КонецФункции

Функция СтрокаВЧисло(знач СтрЗначение)
	Возврат СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗначение);
КонецФункции

Функция СтрокаВBase64(знач Значение) Экспорт
	
	Алфавит		= "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	Результат	= "";
	КолСимволов	= СтрДлина(Значение);
	
	МассивПодстрок	= Новый Массив;
	КолБлоков		= Цел(КолСимволов / 3);
	ОстатокСтроки	= Значение;
	Для НомерБлока = 1 По КолБлоков Цикл
		МассивПодстрок.Добавить(Лев(ОстатокСтроки, 3));
		ОстатокСтроки = Сред(ОстатокСтроки, 4);
	КонецЦикла;
	Если НЕ ПустаяСтрока(ОстатокСтроки) Тогда
		МассивПодстрок.Добавить(ОстатокСтроки);
	КонецЕсли;
	
	Для Каждого Подстрока_3 Из МассивПодстрок Цикл
		Подстрока_4 = "";
		
		// Получение числа из 3 символов
		СуммаПодстроки = 0;
		Разряд = 2;
		Пока Разряд >= 0 Цикл
			Множитель = 1;
			Для ИндексРазряда = 1 По Разряд Цикл
				Множитель = Множитель * 256;
			КонецЦикла;
			
			ЗначениеКода	= КодСимвола(Подстрока_3, 3 - Разряд);
			СуммаПодстроки	= СуммаПодстроки + ?(ЗначениеКода > 0, ЗначениеКода * Множитель, 0);
			Разряд			= Разряд - 1;
		КонецЦикла;
		
		// Получение 4 символов из числа
		Разряд = 3;
		Пока Разряд >= 0 Цикл
			Делитель = 1;
			Для ИндексРазряда = 1 По Разряд Цикл
				Делитель = Делитель * 64;
			КонецЦикла;
			
			ЗначениеКода = Цел(СуммаПодстроки / Делитель);
			Если СтрДлина(Подстрока_3) < 3 И ЗначениеКода = 0 Тогда
				ЗначениеКода = 64;
			КонецЕсли;
			
			Подстрока_4		= Подстрока_4 + Сред(Алфавит, ЗначениеКода + 1, 1);
			СуммаПодстроки	= СуммаПодстроки % Делитель;
			Разряд			= Разряд - 1;
		КонецЦикла;
		
		Результат = Результат + Подстрока_4;
	КонецЦикла;
	
	Возврат Результат;
		
КонецФункции

#КонецОбласти
 