
#Область ПрограммныйИнтерфейс

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие - Соответствие
//	Настройки		- Структура - см. get_connection_settings
//
// Возвращаемое значение:
//	Структура: type = userdata
//		ИсходныеДанные	- Соответствие - исходные данные Confluence
//		Имя				- Строка
//		Ключ			- Строка
//		Тип				- Строка - known, unknown, anonymous, user
//		АдресEMail		- Строка
//		КраткоеИмя		- Строка
//		ПолноеИмя		- Строка
//		Аккаунт			- Структура
//			Идентификатор	- Строка
//			Тип				- Строка - atlassian, app
//
Функция userdata(знач Соответствие) Экспорт
	СтруктураАккаунт = Новый Структура;
	СтруктураАккаунт.Вставить("Идентификатор"	, СвойствоСоответствия(Соответствие, "accountId", ""));
	СтруктураАккаунт.Вставить("Тип"				, СвойствоСоответствия(Соответствие, "accountType", ""));
	
	Результат = Новый Структура;
	Результат.Вставить("type"				, "userdata");
	Результат.Вставить("ИсходныеДанные"		, Соответствие);
	Результат.Вставить("Имя"				, СвойствоСоответствия(Соответствие, "username", ""));
	Результат.Вставить("Ключ"				, СвойствоСоответствия(Соответствие, "userKey", ""));
	Результат.Вставить("Тип"				, СвойствоСоответствия(Соответствие, "type", ""));
	Результат.Вставить("АдресEMail"			, СвойствоСоответствия(Соответствие, "email", ""));
	Результат.Вставить("КраткоеИмя"			, СвойствоСоответствия(Соответствие, "publicName", ""));
	Результат.Вставить("ПолноеИмя"			, СвойствоСоответствия(Соответствие, "displayName", "")); 
	Результат.Вставить("Аккаунт"			, СтруктураАккаунт);
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие - Соответствие
//	Настройки		- Структура - см. get_connection_settings
//
// Возвращаемое значение:
//	Структура: type = version
//		ИсходныеДанные	- Соответствие - исходные данные Confluence
//		Пользователь	- Структура - type = userdata
//		ДатаИзменения	- Дата
//		Описание		- Строка
//		Номер			- Число
//		НеСущественное	- Булево
//
Функция version(знач Соответствие) Экспорт
	ДанныеПользователь = СвойствоСоответствия(Соответствие, "by", Новый Соответствие);
	
	СтруктураПользователь = userdata(ДанныеПользователь);
	
	Результат = Новый Структура;
	Результат.Вставить("type"				, "version");
	Результат.Вставить("ИсходныеДанные"		, Соответствие);
	Результат.Вставить("Пользователь"		, СтруктураПользователь);
	Результат.Вставить("ДатаИзменения"		, ДатаИзЗначения(Соответствие, "when"));
	Результат.Вставить("Описание"			, СвойствоСоответствия(Соответствие, "message", ""));
	Результат.Вставить("Номер"				, ЧислоИзЗначения(Соответствие, "number"));
	Результат.Вставить("НеСущественное"		, БулевоИзЗначения(Соответствие, "minorEdit"));
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие - Соответствие
//
// Возвращаемое значение:
//	Структура: type = attachment
//		ИсходныеДанные	- Соответствие - исходные данные Confluence
//		Идентификатор	- Строка - идентификатор файла
//		Заголовок		- Строка - заголовок файла
//		РазмерФайла		- Число - размер файла в байтах
//		ТипОписание		- Строка - строковое представление типа данных
//		Комментарий		- Строка - комментарий к файлу
//		mimeType		- Строка - MIME тип данных, см. https://ru.wikipedia.org/wiki/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA_MIME-%D1%82%D0%B8%D0%BF%D0%BE%D0%B2
//		ЕстьКодировка	- Булево - признак наличия кодировки заголовка в URL
//
Функция attachment(знач Соответствие) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("type"			, "attachment");
	Результат.Вставить("ИсходныеДанные"	, Соответствие);
	Результат.Вставить("Идентификатор"	, СвойствоСоответствия(Соответствие, "id", ""));
	Результат.Вставить("Заголовок"		, СвойствоСоответствия(Соответствие, "title", ""));
	Результат.Вставить("РазмерФайла"	, СвойствоСоответствия(Соответствие, "extensions/fileSize", 0, Истина));
	Результат.Вставить("ТипОписание"	, СвойствоСоответствия(Соответствие, "extensions/mediaTypeDescription", ""));
	Результат.Вставить("Комментарий"	, СвойствоСоответствия(Соответствие, "extensions/comment", ""));
	Результат.Вставить("mimeType"		, СвойствоСоответствия(Соответствие, "extensions/mediaType", ""));
	Результат.Вставить("Комментарий"	, СвойствоСоответствия(Соответствие, "extensions/comment", ""));
	
	Разделитель = СтрНайти(Результат.Заголовок, "?");
	Если Разделитель > 0 Тогда
		Результат.Заголовок = Лев(Результат.Заголовок, Разделитель - 1);
	КонецЕсли;
	
	Если Сред(Результат.Заголовок, 1, 1) = "%"
		И Сред(Результат.Заголовок, 4, 1) = "%" Тогда
		Результат.Вставить("ЕстьКодировка"	, Истина);
	Иначе 
		Результат.Вставить("ЕстьКодировка"	, Ложь);
	КонецЕсли;
		
	Возврат Результат;
КонецФункции

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие - Соответствие
//	Настройки		- Структура - см. get_connection_settings
//
// Возвращаемое значение:
//	Структура: type = space
//		ИсходныеДанные	- Соответствие - исходные данные Confluence
//		Идентификатор		- Строка
//		Ключ				- Строка
//		Наименование		- Строка
//		Описание			- Строка
//		ДомашняяСтраница	- Структура - type = homepage
//		Общее				- Булево
//		Действующее			- Булево
//		АнонимныйДоступ		- Булево
//		Метки				- Массив
//			Префикс			- Строка
//			Представление	- Строка
//			Идентификатор	- Строка
//			Метка			- Строка
//
Функция space(знач Соответствие, знач Настройки) Экспорт
	ТипПространства			= СвойствоСоответствия(Соответствие, "type", "");
	СтатусПространства		= СвойствоСоответствия(Соответствие, "status", "");
	ОписаниеПространства	= СвойствоСоответствия(Соответствие, "description/view/value", "");
	МеткиПространства		= СвойствоСоответствия(Соответствие, "metadata/labels/results", Новый Массив);
	ДомашняяСтраница		= СвойствоСоответствия(Соответствие, "homepage", Новый Соответствие);
	РазрешенияСтраницы		= СвойствоСоответствия(Соответствие, "permissions", Новый Массив);
	
	АнонимныйДоступ = Ложь;
	Для Каждого СоответствиеДоступ Из РазрешенияСтраницы Цикл
		ЗначениеДоступа = СвойствоСоответствия(СоответствиеДоступ, "anonymousAccess", Ложь);
		Если ЗначениеДоступа = Истина Тогда
			АнонимныйДоступ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	МассивМетки = Новый Массив;
	Для Каждого СоответствиеМетки Из МеткиПространства Цикл
		СтруктураМетки = Новый Структура;
		СтруктураМетки.Вставить("Префикс"		, СвойствоСоответствия(СоответствиеМетки, "prefix", ""));
		СтруктураМетки.Вставить("Представление"	, СвойствоСоответствия(СоответствиеМетки, "name", ""));
		СтруктураМетки.Вставить("Идентификатор"	, СвойствоСоответствия(СоответствиеМетки, "id", ""));
		СтруктураМетки.Вставить("Метка"			, СвойствоСоответствия(СоответствиеМетки, "label", ""));
		
		МассивМетки.Добавить(СтруктураМетки);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("type"				, "space");
	Результат.Вставить("ИсходныеДанные"		, Соответствие);
	Результат.Вставить("Идентификатор"		, СвойствоСоответствия(Соответствие, "id", ""));
	Результат.Вставить("Ключ"				, СвойствоСоответствия(Соответствие, "key", ""));
	Результат.Вставить("Наименование"		, СвойствоСоответствия(Соответствие, "name", ""));
	Результат.Вставить("Описание"			, ЗаменитьСпецСимволыHTML(ОписаниеПространства));
	Результат.Вставить("ДомашняяСтраница"	, homepage(ДомашняяСтраница, Настройки));
	Результат.Вставить("Общее"				, (ТипПространства = "global"));
	Результат.Вставить("Действующее"		, (СтатусПространства = "current"));
	Результат.Вставить("Метки"				, МассивМетки);
	Результат.Вставить("АнонимныйДоступ"	, АнонимныйДоступ);
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие - Соответствие
//	Настройки		- Структура - см. get_connection_settings
//
// Возвращаемое значение:
//	Структура: type = spacearray
//		ИсходныеДанные	- Соответствие - исходные данные Confluence
//		Значения		- Массив
//			Элемент массива Структура: type = space
//		Начало			- Число
//		Ограничение		- Число
//		РазмерВыборки	- Число
//
Функция spacearray(знач Соответствие, знач Настройки) Экспорт
	ДанныеРезультат = СвойствоСоответствия(Соответствие, "results", Новый Массив);
	
	МассивРезультат = Новый Массив;
	Для Каждого СоответствиеПространство Из ДанныеРезультат Цикл
		СтруктураПространство = space(СоответствиеПространство, Настройки);
		МассивРезультат.Добавить(СтруктураПространство);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ИсходныеДанные"		, Соответствие);
	Результат.Вставить("type"				, "spacearray");
	Результат.Вставить("Значения"			, МассивРезультат);
	Результат.Вставить("Начало"				, ЧислоИзЗначения(Соответствие, "start"));
	Результат.Вставить("Ограничение"		, ЧислоИзЗначения(Соответствие, "limit"));
	Результат.Вставить("РазмерВыборки"		, ЧислоИзЗначения(Соответствие, "size"));
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие	- Соответствие
//	Настройки		- Структура - см. get_connection_settings
//
// Возвращаемое значение:
//	Структура: type = homepage
//		ИсходныеДанные	- Соответствие - исходные данные Confluence
//		Идентификатор	- Строка
//		ТипДанных		- ПеречислениеСсылка.confluence_ТипыДанных
//		Заголовок		- Строка
//		Статус			- Строка - статус контента
//		Ссылки			- Структура - type = links
//
Функция homepage(знач Соответствие, знач Настройки) Экспорт
	ДанныеСсылки = СвойствоСоответствия(Соответствие, "_links", Новый Соответствие);
	
	Результат = Новый Структура;
	Результат.Вставить("ИсходныеДанные"		, Соответствие);
	Результат.Вставить("type"				, "content");
	Результат.Вставить("Идентификатор"		, СвойствоСоответствия(Соответствие, "id", ""));
	Результат.Вставить("ТипДанных"			, ТипДанныхИзСтрокиConfluence(Соответствие, "type"));
	Результат.Вставить("Статус"				, СтатусИзСтрокиConfluence(Соответствие, "status"));
	Результат.Вставить("Заголовок"			, СвойствоСоответствия(Соответствие, "title", ""));
	Результат.Вставить("Ссылки"				, links(ДанныеСсылки));
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие	- Соответствие
//	Настройки		- Структура - см. get_connection_settings
//
// Возвращаемое значение:
//	Структура: type = content
//		ИсходныеДанные		- Соответствие - исходные данные Confluence
//		Идентификатор		- Строка
//		ТипДанных			- ПеречислениеСсылка.confluence_ТипыДанных
//		Заголовок			- Строка
//		Статус				- Строка - статус контента
//		Пространство		- Структура - type = space
//		Версия				- Структура - type = version
//		Ссылки				- Структура - type = links
//		ЕстьПодчиненные		- Булево - признак наличия подчиненных страниц
//		ЕстьВложения		- Булево - признак наличия вложений у страницы
//		Вложения			- Структура - type = attachments
//		body_storage		- Строка - содержимое страницы в формате Confluence
//		body_styled_view	- Строка - содержимое страницы в HTML формате
//
Функция content(знач Соответствие, знач Настройки) Экспорт
	ДанныеПространство	= СвойствоСоответствия(Соответствие, "space", Новый Соответствие);
	ДанныеВерсия		= СвойствоСоответствия(Соответствие, "version", Новый Соответствие);
	ДанныеСсылки		= СвойствоСоответствия(Соответствие, "_links", Новый Соответствие);
	ДанныеВложений		= СвойствоСоответствия(Соответствие, "children/attachment", Новый Соответствие);
	ДанныеМеток			= СвойствоСоответствия(Соответствие, "metadata/labels", Новый Соответствие);
	
	ЕстьПодчиненные = БулевоИзЗначения(Соответствие, "childTypes/page/value");
	ЕстьВложения	= БулевоИзЗначения(Соответствие, "childTypes/attachment/value");
	
	Результат = Новый Структура;
	Результат.Вставить("ИсходныеДанные"		, Соответствие);
	Результат.Вставить("type"				, "content");
	Результат.Вставить("Идентификатор"		, СвойствоСоответствия(Соответствие, "id", ""));
	Результат.Вставить("ТипДанных"			, ТипДанныхИзСтрокиConfluence(Соответствие, "type"));
	Результат.Вставить("Статус"				, СтатусИзСтрокиConfluence(Соответствие, "status"));
	Результат.Вставить("Заголовок"			, СвойствоСоответствия(Соответствие, "title", ""));
	Результат.Вставить("Пространство"		, space(ДанныеПространство, Настройки));
	Результат.Вставить("Версия"				, version(ДанныеВерсия));
	Результат.Вставить("Ссылки"				, links(ДанныеСсылки));
	Результат.Вставить("Вложения"			, attachments(ДанныеВложений));
	Результат.Вставить("Метки"				, labelarray(ДанныеМеток));
	Результат.Вставить("ЕстьПодчиненные"	, ЕстьПодчиненные);
	Результат.Вставить("ЕстьВложения"		, ЕстьВложения);
	Результат.Вставить("body_storage"		, СвойствоСоответствия(Соответствие, "body/storage/value", ""));
	Результат.Вставить("body_styled_view"	, СвойствоСоответствия(Соответствие, "body/styled_view/value", ""));
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие - Соответствие
//	Настройки		- Структура - см. get_connection_settings
//
// Возвращаемое значение:
//	Структура: type = contentarray
//		ИсходныеДанные	- Соответствие - исходные данные Confluence
//		Значения		- Массив
//			Элемент массива Структура: type = content
//		Начало			- Число
//		Ограничение		- Число
//		РазмерВыборки	- Число
//
Функция contentarray(знач Соответствие, знач Настройки) Экспорт
	ДанныеРезультат = СвойствоСоответствия(Соответствие, "results", Новый Массив);
	
	МассивРезультат = Новый Массив;
	Для Каждого СоответствиеКонтент Из ДанныеРезультат Цикл
		СтруктураКонтент = content(СоответствиеКонтент, Настройки);
		МассивРезультат.Добавить(СтруктураКонтент);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("type"				, "contentarray");
	Результат.Вставить("ИсходныеДанные"		, Соответствие);
	Результат.Вставить("Значения"			, МассивРезультат);
	Результат.Вставить("Начало"				, ЧислоИзЗначения(Соответствие, "start"));
	Результат.Вставить("Ограничение"		, ЧислоИзЗначения(Соответствие, "limit"));
	Результат.Вставить("РазмерВыборки"		, ЧислоИзЗначения(Соответствие, "size"));
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие - Соответствие
//	Настройки		- Структура - см. get_connection_settings
//
// Возвращаемое значение:
//	Структура: type = contentarray
//		ИсходныеДанные	- Соответствие - исходные данные Confluence
//		Страницы		- Структура - type = contentarray
//		Вложения		- Структура - type = attachment
//		Комментарии		- Неопределено - не реализовано
//
Функция contentchildren(знач Соответствие, знач Настройки) Экспорт
	ДанныеСтраниц		= СвойствоСоответствия(Соответствие, "page", Новый Массив);
	ДанныеВложений		= СвойствоСоответствия(Соответствие, "attachment", Новый Массив);
	//ДанныеКомментариев	= СвойствоСоответствия(Соответствие, "comment", Новый Массив);
	
	Результат = Новый Структура;
	Результат.Вставить("type"				, "contentchildren");
	Результат.Вставить("ИсходныеДанные"		, Соответствие);
	Результат.Вставить("Страницы"			, contentarray(ДанныеСтраниц, Настройки));
	Результат.Вставить("Вложения"			, attachment(ДанныеВложений));
	Результат.Вставить("Комментарии"		, Неопределено); //contentarray(ДанныеКомментариев));
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие - Соответствие
//
// Возвращаемое значение:
//	Структура: type = label
//		ИсходныеДанные	- Соответствие - исходные данные Confluence
//		Префикс			- Строка 
//		Имя				- Строка
//		Идентификатор	- Строка
//		Метка			- Строка
//
Функция label(знач Соответствие) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("ИсходныеДанные"	, Соответствие);
	Результат.Вставить("type"			, "label");
	Результат.Вставить("Префикс"		, ПрефиксМеткиИзСтрокиConfluence(Соответствие, "prefix"));
	Результат.Вставить("Имя"			, СвойствоСоответствия(Соответствие, "name"));
	Результат.Вставить("Идентификатор"	, СвойствоСоответствия(Соответствие, "id"));
	Результат.Вставить("Метка"			, СвойствоСоответствия(Соответствие, "label", ""));
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие - Соответствие
//
// Возвращаемое значение:
//	Структура: type = labelarray
//		ИсходныеДанные	- Соответствие - исходные данные Confluence
//		Значения		- Массив
//			Элемент массива Структура: type = label
//		Начало			- Число
//		Ограничение		- Число
//		РазмерВыборки	- Число
//
Функция labelarray(знач Соответствие) Экспорт
	ДанныеРезультат = СвойствоСоответствия(Соответствие, "results ", Новый Массив);
	
	МассивРезультат = Новый Массив;
	Для Каждого СоответствиеМетка Из ДанныеРезультат Цикл
		СтруктураМетка = label(СоответствиеМетка);
		МассивРезультат.Добавить(СтруктураМетка);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("type"				, "labelarray");
	Результат.Вставить("ИсходныеДанные"		, Соответствие);
	Результат.Вставить("Значения"			, МассивРезультат);
	Результат.Вставить("Начало"				, ЧислоИзЗначения(Соответствие, "start"));
	Результат.Вставить("Ограничение"		, ЧислоИзЗначения(Соответствие, "limit"));
	Результат.Вставить("РазмерВыборки"		, ЧислоИзЗначения(Соответствие, "size"));
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие	- Соответствие
//	Настройки		- Структура - см. get_connection_settings
//
// Возвращаемое значение:
//	Структура: type = searchresult
//		ИсходныеДанные	- Соответствие - исходные данные Confluence
//		Значения		- Массив - type = space
//			Контент			- Структура - type = content
//				Только свойства: Идентификатор, ТипДанных, Статус, Заголовок, Ссылки
//			Пространство	- Структура
//				Заголовок	- Строка
//				Ссылка		- Строка
//			Заголовок		- ФорматированнаяСтрока, Строка
//			Описание		- ФорматированнаяСтрока, Строка
//			Ссылка			- Строка
//			Навигация		- Массив - элемент Структура type = breadcrumb
//			ТипДанных		- ПеречислениеСсылка.confluence_ТипыДанных
//			Обновлено		- Дата - дата (с временем) обновления
//		Начало			- Число - номер строки выборки (нумерация начинается с 0)
//		Ограничение		- Число - количество строк запроса (ПараметрыПоиска.Размер)
//		РазмерВыборки	- Число - количество строк в выборке
//		ВсегоКоличество	- Число - всего найденных строк
//		СтрокаЗапроса	- Строка - строка запроса для повторного выполнения
//		ВремяПоиска		- Число - время выполнения запроса
//
Функция searchresult(знач Соответствие, знач Настройки) Экспорт
	ДанныеРезультат = СвойствоСоответствия(Соответствие, "results", Новый Массив);
	ДанныеСсылки	= СвойствоСоответствия(Соответствие, "_links", Новый Соответствие);
	
	МассивРезультат = Новый Массив;
	Для Каждого СоответствиеРезультат Из ДанныеРезультат Цикл
		ДанныеКонтента		= СвойствоСоответствия(СоответствиеРезультат, "content", Новый Соответствие);
		ДанныеПространства	= СвойствоСоответствия(СоответствиеРезультат, "resultGlobalContainer", Новый Соответствие);
		ДанныеНавигация		= СвойствоСоответствия(СоответствиеРезультат, "breadcrumbs", Новый Массив);
		
		СтруктураПространство = Новый Структура;
		СтруктураПространство.Вставить("Заголовок"	, СвойствоСоответствия(ДанныеПространства, "title", ""));
		СтруктураПространство.Вставить("Ссылка"		, АдресСсылкиИзЗначения(ДанныеПространства, "displayUrl", Настройки.АдресСервераWiki));
		
		ЗначениеЗаголовок	= СвойствоСоответствия(СоответствиеРезультат, "title", "");
		ЗначениеОписание	= СвойствоСоответствия(СоответствиеРезультат, "excerpt", "");
		МассивНавигация		= breadcrumbs(ДанныеНавигация);
		
		СтруктураКонтент = content(ДанныеКонтента, Настройки);
		СтруктураКонтент.Ссылки.Основа = СвойствоСоответствия(ДанныеСсылки, "base", "");
		
		СтруктураЗначение = Новый Структура;
		СтруктураЗначение.Вставить("Контент"		, СтруктураКонтент);
		СтруктураЗначение.Вставить("Пространство"	, СтруктураПространство);
		СтруктураЗначение.Вставить("Заголовок"		, ФорматироватьСтроку(ЗначениеЗаголовок));
		СтруктураЗначение.Вставить("Описание"		, ФорматироватьСтроку(ЗначениеОписание));
		СтруктураЗначение.Вставить("Ссылка"			, АдресСсылкиИзЗначения(СоответствиеРезультат, "url", Настройки.АдресСервераWiki));
		СтруктураЗначение.Вставить("Навигация"		, МассивНавигация); 
		СтруктураЗначение.Вставить("ТипДанных"		, ТипДанныхИзСтрокиConfluence(СоответствиеРезультат, "entityType"));
		СтруктураЗначение.Вставить("Обновлено"		, ДатаИзЗначения(СоответствиеРезультат, "lastModified"));
		
		МассивРезультат.Добавить(СтруктураЗначение);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("type"				, "searchresult");
	Результат.Вставить("ИсходныеДанные"		, Соответствие);
	Результат.Вставить("Значения"			, МассивРезультат);
	Результат.Вставить("Начало"				, ЧислоИзЗначения(Соответствие, "start"));
	Результат.Вставить("Ограничение"		, ЧислоИзЗначения(Соответствие, "limit"));
	Результат.Вставить("РазмерВыборки"		, ЧислоИзЗначения(Соответствие, "size"));
	Результат.Вставить("ВсегоКоличество"	, ЧислоИзЗначения(Соответствие, "totalSize"));
	Результат.Вставить("СтрокаЗапроса"		, СвойствоСоответствия(Соответствие, "cqlQuery", ""));
	Результат.Вставить("ВремяПоиска"		, ЧислоИзЗначения(Соответствие, "searchDuration"));
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие - Соответствие
//
// Возвращаемое значение:
//	Структура: type = versions
//		ИсходныеДанные	- Соответствие - исходные данные Confluence
//		Значения		- Массив - type = version
//		Начало			- Число - номер строки выборки
//		Ограничение		- Число - количество строк запроса
//		РазмерВыборки	- Число - количество строк в выборке
//
Функция versions(знач Соответствие) Экспорт
	ДанныеРезультат = СвойствоСоответствия(Соответствие, "results", Новый Массив);
	
	МассивРезультат = Новый Массив;
	Для Каждого СоответствиеРезультат Из ДанныеРезультат Цикл
		СтруктураВерсия = version(СоответствиеРезультат);
		МассивРезультат.Добавить(СтруктураВерсия);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("type"				, "versions");
	Результат.Вставить("ИсходныеДанные"		, Соответствие);
	Результат.Вставить("Значения"			, МассивРезультат);
	Результат.Вставить("Начало"				, ЧислоИзЗначения(Соответствие, "start"));
	Результат.Вставить("Ограничение"		, ЧислоИзЗначения(Соответствие, "limit"));
	Результат.Вставить("РазмерВыборки"		, ЧислоИзЗначения(Соответствие, "size"));
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие - Соответствие
//
// Возвращаемое значение:
//	Структура: type = links
//		ИсходныеДанные	- Соответствие - исходные данные Confluence
//		Редактирование	- Строка - ссылка для редактирования статьи (без учета основного адреса)
//		Просмотр		- Строка - ссылка для просмотра статьи (без учета основного адреса)
//		Сокращенная		- Строка - краткая ссылка для просмотра статьи (без учета основного адреса)
//		Основа			- Строка - основной адрес расположения базы знаний
//
Функция links(знач Соответствие) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("type"				, "links");
	Результат.Вставить("ИсходныеДанные"		, Соответствие);
	Результат.Вставить("Редактирование"		, СвойствоСоответствия(Соответствие, "editui", ""));
	Результат.Вставить("Просмотр"			, СвойствоСоответствия(Соответствие, "webui", ""));
	Результат.Вставить("Сокращенная"		, СвойствоСоответствия(Соответствие, "tinyui", ""));
	Результат.Вставить("Основа"				, СвойствоСоответствия(Соответствие, "base", ""));
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие - Соответствие
//
// Возвращаемое значение:
//	Структура: type = attachments
//		ИсходныеДанные	- Соответствие - исходные данные Confluence
//		Значения		- Массив - type = attachment
//		Начало			- Число - номер строки выборки
//		Ограничение		- Число - количество строк запроса
//		РазмерВыборки	- Число - количество строк в выборке
//
Функция attachments(знач Соответствие) Экспорт
	ДанныеРезультат = СвойствоСоответствия(Соответствие, "results", Новый Массив);
	
	МассивРезультат = Новый Массив;
	Для Каждого СоответствиеРезультат Из ДанныеРезультат Цикл
		СтруктураВложенгие = attachment(СоответствиеРезультат);
		МассивРезультат.Добавить(СтруктураВложенгие);
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("type"				, "attachments");
	Результат.Вставить("ИсходныеДанные"		, Соответствие);
	Результат.Вставить("Значения"			, МассивРезультат);
	Результат.Вставить("Начало"				, ЧислоИзЗначения(Соответствие, "start"));
	Результат.Вставить("Ограничение"		, ЧислоИзЗначения(Соответствие, "limit"));
	Результат.Вставить("РазмерВыборки"		, ЧислоИзЗначения(Соответствие, "size"));
	
	Возврат Результат;
КонецФункции

// Возвращает структуру с данным ошибки
//
// Параметры:
//	ОтветHTTP	- HTTPОтвет
//	ДопТекст	- Строка
//
// Возвращаемое значение:
//	Структура: type = error
//		Код			- Число
//		Текст		- Строка
//		ДопТекст	- Строка
// 
Функция error(знач ОтветHTTP, знач ДопТекст = "") Экспорт 
	ТекстОшибки	= ОтветHTTP.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	КодОшибки	= ОтветHTTP.КодСостояния;
	
	Возврат Новый Структура("type, Код, Текст, ДопТекст",
	    "error",
		КодОшибки,
		ТекстОшибки,
		ДопТекст);
КонецФункции

// Возвращает структуру со статусом "Выполнено"
//
// Параметры:
//	ОтветHTTP	- HTTPОтвет
//	ДопТекст	- Строка
//
// Возвращаемое значение:
//	Структура: type = done
//		Код			- Число
//		ДопТекст	- Строка
// 
Функция done(знач ОтветHTTP, знач ДопТекст = "") Экспорт
	КодВыполнения = ОтветHTTP.КодСостояния;
	
	Возврат Новый Структура("type, Код, ДопТекст",
	    "done",
		КодВыполнения,
		ДопТекст);
КонецФункции

// Возвращает массив с данными из соответствия (ответ от Confluence)
//
// Параметры:
//	Соответствие - Соответствие
//
// Возвращаемое значение:
//	Массив: Структура: 
//		type		= breadcrumb
//		Заголовок	- Строка
//		Ссылка		- Строка
//		Разделитель	- Строка
//
Функция breadcrumbs(знач Массив) Экспорт
	МассивНавигация = Новый Массив;
	
	Для Каждого Соответствие Из Массив Цикл
		СтруктураНавигация = Новый Структура;
		СтруктураНавигация.Вставить("type"			, "breadcrumb");
		СтруктураНавигация.Вставить("Заголовок"		, СвойствоСоответствия(Соответствие, "label", ""));
		СтруктураНавигация.Вставить("Ссылка"		, СвойствоСоответствия(Соответствие, "url", ""));
		СтруктураНавигация.Вставить("Разделитель"	, СвойствоСоответствия(Соответствие, "separator", ""));
		
		МассивНавигация.Добавить(СтруктураНавигация);
	КонецЦикла;
	
	Возврат МассивНавигация;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ОбщегоНазначения

Функция СвойствоСтруктуры(Структура, Ключ, ПоУмолчанию = Неопределено)
	Возврат confluence_CommonClientServer.СвойствоСтруктуры(Структура, Ключ, ПоУмолчанию);
КонецФункции

Функция СвойствоСоответствия(знач Соответствие, знач ПутьКСвойству, знач ПоУмолчанию = Неопределено, знач КакЧисло = Ложь)
	Возврат confluence_CommonClientServer.СвойствоСоответствия(Соответствие, ПутьКСвойству, ПоУмолчанию, КакЧисло);
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_КонвертацияДанных

Функция ЗаменитьСпецСимволыHTML(знач ЗначениеСтроки)
	МассивЗамен = Новый Соответствие;
	МассивЗамен.Вставить("&amp;", "&");
	МассивЗамен.Вставить("&lt;", "<");
	МассивЗамен.Вставить("&gt;", ">");
	МассивЗамен.Вставить("&quot;", """");
	МассивЗамен.Вставить("&#39;", "'");
	
	СтрИсходник = ЗначениеСтроки;
	Для Каждого КлючИЗначение Из МассивЗамен Цикл
		СтрИсходник = СтрЗаменить(СтрИсходник, КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат СтрИсходник;
КонецФункции

Функция ФорматироватьСтроку(знач ЗначениеСтроки)
	ЗначениеСтроки = ЗаменитьСпецСимволыHTML(ЗначениеСтроки);
	Если СтрНайти(ЗначениеСтроки, "@@@hl@@@") = 0 Тогда
		Возврат ЗначениеСтроки;
	КонецЕсли;
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗначениеСтроки, "@@@hl@@@", Истина, Ложь);
	
	МассивПредставление = Новый Массив;
	Для Каждого Подстрока Из МассивПодстрок Цикл
		СтрОкончание	= СтрНайти(Подстрока, "@@@endhl@@@");
		НачалоСтроки	= Лев(Подстрока, СтрОкончание-1);
		ОстатокСтроки	= СтрЗаменить(Сред(Подстрока, СтрОкончание), "@@@endhl@@@", "");
		
		Если СтрОкончание > 0 Тогда
			МассивПредставление.Добавить(Новый ФорматированнаяСтрока(НачалоСтроки, Новый Шрифт(,, Истина)));
		Иначе
			МассивПредставление.Добавить(НачалоСтроки);
		КонецЕсли;
		
		МассивПредставление.Добавить(ОстатокСтроки);
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(МассивПредставление);
КонецФункции

Функция ДатаИзЗначения(знач Соответствие, знач ПутьКлюча)
	ЗначениеСвойства = СвойствоСоответствия(Соответствие, ПутьКлюча, Неопределено);
	Если ЗначениеСвойства = Неопределено Тогда
		Возврат Дата(1, 1, 1);
	КонецЕсли;
	
	ТипСвойства = ТипЗнч(ЗначениеСвойства);
	Если ТипСвойства = Тип("Дата") Тогда
		Возврат ЗначениеСвойства;
	КонецЕсли;
	
	// "yyyy/MM/dd HH:mm" "yyyy-MM-dd HH:mm" "yyyy/MM/dd" "yyyy-MM-dd"
	ЗначГод		= СтрокаВЧисло(Сред(ЗначениеСвойства, 1, 4));
	ЗначМесяц	= СтрокаВЧисло(Сред(ЗначениеСвойства, 6, 2));
	ЗначДата		= СтрокаВЧисло(Сред(ЗначениеСвойства, 9, 2));
	ЗначЧас		= СтрокаВЧисло(Сред(ЗначениеСвойства, 12, 2));
	ЗначМин		= СтрокаВЧисло(Сред(ЗначениеСвойства, 15, 2));
	
	Возврат Дата(ЗначГод, ЗначМесяц, ЗначДата, ЗначЧас, ЗначМин, 0);
КонецФункции

Функция ЧислоИзЗначения(знач Соответствие, знач ПутьКлюча)
	ЗначениеСвойства = СвойствоСоответствия(Соответствие, ПутьКлюча, Неопределено);
	Если ЗначениеСвойства = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	ТипСвойства = ТипЗнч(ЗначениеСвойства);
	Если ТипСвойства = Тип("Число") Тогда
		Возврат ЗначениеСвойства;
	КонецЕсли;
	
	Возврат СтрокаВЧисло(ЗначениеСвойства);
КонецФункции

Функция БулевоИзЗначения(знач Соответствие, знач ПутьКлюча)
	ЗначениеСвойства = СвойствоСоответствия(Соответствие, ПутьКлюча, Неопределено);
	Если ЗначениеСвойства = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипСвойства = ТипЗнч(ЗначениеСвойства);
	Если ТипСвойства = Тип("Булево") Тогда
		Возврат ЗначениеСвойства;
	КонецЕсли;
	
	Возврат ?(ЗначениеСвойства = "true", Истина, Ложь);
КонецФункции

Функция АдресСсылкиИзЗначения(знач Соответствие, знач ПутьКлюча, знач ПутьКСерверу)
	ЗначениеСвойства = СвойствоСоответствия(Соответствие, ПутьКлюча, Неопределено);
	Если ЗначениеСвойства = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	БезРазделителя = (СтрЗаканчиваетсяНа(ПутьКСерверу, "/") ИЛИ СтрНачинаетсяС(ЗначениеСвойства, "/"));
	
	Возврат ПутьКСерверу + ?(БезРазделителя, "", "/") + ЗначениеСвойства;
КонецФункции

Функция ЗначениеВСтрокуConfluence(знач ЗначениеСравнения, знач ДопустимыеТипы = Неопределено)
	КонтрольТипов = (ТипЗнч(ДопустимыеТипы) = Тип("ОписаниеТипов"));
	
	ТипЗначенияСравнения = ТипЗнч(ЗначениеСравнения);
	
	Если ТипЗначенияСравнения = Тип("Массив") ИЛИ ТипЗначенияСравнения = Тип("ФиксированныйМассив") Тогда  
		СтрРезультат = "";
		Для Каждого ЗначениеМассива Из ЗначениеСравнения Цикл
			СтрРезультат = СтрРезультат + ?(ПустаяСтрока(СтрРезультат), "", ", ") + ЗначениеВСтрокуConfluence(ЗначениеМассива, ДопустимыеТипы);
		КонецЦикла;
		
		Возврат СтрРезультат;
	ИначеЕсли ТипЗначенияСравнения = Тип("СписокЗначений") Тогда  
		СтрРезультат = "";
		Для Каждого ЭлементСписка Из ЗначениеСравнения Цикл
			СтрРезультат = СтрРезультат + ?(ПустаяСтрока(СтрРезультат), "", ", ") + ЗначениеВСтрокуConfluence(ЭлементСписка.Значение, ДопустимыеТипы);
		КонецЦикла;
		
		Возврат СтрРезультат;
	КонецЕсли;
	
	Если КонтрольТипов И НЕ ДопустимыеТипы.СодержитТип(ТипЗначенияСравнения) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТипЗначенияСравнения = Тип("Строка") Тогда
		ЗначениеConfluence = """" + ЗначениеСравнения + """";
	ИначеЕсли ТипЗначенияСравнения = Тип("Число") Тогда  
		ЗначениеConfluence = Формат(ЗначениеСравнения, "ЧН=0; ЧГ=");
	ИначеЕсли ТипЗначенияСравнения = Тип("Дата") Тогда  
		ЗначениеConfluence = """" + Формат(ЗначениеСравнения, "ДФ='yyyy/MM/dd HH:mm'") + """";
	ИначеЕсли ТипЗначенияСравнения = Тип("Булево") Тогда
		ЗначениеConfluence = Формат(ЗначениеСравнения, "БЛ=false; БИ=true");
	ИначеЕсли ТипЗначенияСравнения = Тип("ПеречислениеСсылка.confluence_ТипыДанных") Тогда
		ЗначениеConfluence = ТипДанныхВСтрокуConfluence(ЗначениеСравнения);
	Иначе
		Попытка
			ЗначениеConfluence = Строка(ЗначениеСравнения);
		Исключение
			ВызватьИсключение СтрШаблон(НСтр("ru='Тип данных ""%1"" не поддерживается.'"), Строка(ТипЗначенияСравнения));
		КонецПопытки;
	КонецЕсли;
	
	Возврат ЗначениеConfluence;
КонецФункции

Функция СтатусИзСтрокиConfluence(знач Соответствие, знач ПутьКлюча)
	ЗначениеСвойства = СвойствоСоответствия(Соответствие, ПутьКлюча, Неопределено);
	Если ЗначениеСвойства = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	НРегСтатус = НРег(ЗначениеСвойства);
	
	СтруктураСтатусов = confluence_ApiClientServerReuse.content_status(Ложь); 
	Если СтруктураСтатусов.Свойство(НРегСтатус) Тогда
		Возврат СтруктураСтатусов[НРегСтатус];
	Иначе 
		Возврат "";
	КонецЕсли;
КонецФункции

Функция СтатусВСтрокуConfluence(знач Статус)
	НРегСтатус = НРег(Статус);
	
	СтруктураСтатусов = confluence_ApiClientServerReuse.content_status(Истина); 
	Если СтруктураСтатусов.Свойство(НРегСтатус) Тогда
		Возврат СтруктураСтатусов[НРегСтатус];
	Иначе 
		Возврат "";
	КонецЕсли;
КонецФункции

Функция ПрефиксМеткиИзСтрокиConfluence(знач Соответствие, знач ПутьКлюча)
	ЗначениеСвойства = СвойствоСоответствия(Соответствие, ПутьКлюча, Неопределено);
	Если ЗначениеСвойства = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	НРегПрефикс = НРег(ЗначениеСвойства);
	
	СтруктураПрефиксов = confluence_ApiClientServerReuse.label_prefix(Ложь); 
	Если СтруктураПрефиксов.Свойство(НРегПрефикс) Тогда
		Возврат СтруктураПрефиксов[НРегПрефикс];
	Иначе 
		Возврат "";
	КонецЕсли;
КонецФункции

Функция ПрефиксМеткиВСтрокуConfluence(знач Префикс)
	НРегПрефикс = НРег(Префикс);
	
	СтруктураПрефиксов = confluence_ApiClientServerReuse.label_prefix(Истина); 
	Если СтруктураПрефиксов.Свойство(НРегПрефикс) Тогда
		Возврат СтруктураПрефиксов[НРегПрефикс];
	Иначе 
		Возврат "";
	КонецЕсли;
КонецФункции

Функция ТипДанныхИзСтрокиConfluence(знач Соответствие, знач ПутьКлюча)
	ЗначениеСвойства = СвойствоСоответствия(Соответствие, ПутьКлюча, Неопределено);
	Если ЗначениеСвойства = Неопределено Тогда
		Возврат ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.ПустаяСсылка");
	КонецЕсли;
	
	НРегЗначениеСвойства = НРег(ЗначениеСвойства);
	Если НРегЗначениеСвойства = "page" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.Статья");
	ИначеЕсли НРегЗначениеСвойства = "blogpost" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.ЗаписьБлога");
	ИначеЕсли НРегЗначениеСвойства = "comment" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.Комментарий");
	ИначеЕсли НРегЗначениеСвойства = "attachment" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.Вложение");
	ИначеЕсли НРегЗначениеСвойства = "space" Тогда
		Возврат ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.Пространство");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.ПустаяСсылка");
	КонецЕсли;
КонецФункции

Функция ТипДанныхВСтрокуConfluence(знач ТипДанных)
	Если ТипДанных = ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.Статья") Тогда
		Возврат "page";
	ИначеЕсли ТипДанных = ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.ЗаписьБлога") Тогда
		Возврат "blogpost";
	ИначеЕсли ТипДанных = ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.Комментарий") Тогда
		Возврат "comment";
	ИначеЕсли ТипДанных = ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.Вложение") Тогда
		Возврат "attachment";
	ИначеЕсли ТипДанных = ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.Пространство") Тогда
		Возврат "space";
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

Функция ПолеСортировкиКонтентаВСтрокуConfluence(знач ПолеКонтента)
	НРегПолеКонтента = СокрЛП(НРег(ПолеКонтента));
	Если НРегПолеКонтента = "заголовок" Тогда
		Возврат "title";
	ИначеЕсли НРегПолеКонтента = "датасоздания" Тогда
		Возврат "contentHistory.createdDate";
	ИначеЕсли НРегПолеКонтента = "датаизменения" Тогда
		Возврат "contentHistory.lastUpdated";
	ИначеЕсли НРегПолеКонтента = "автор" Тогда
		Возврат "contentHistory.createdBy.publicName";
	КонецЕсли;
	
	Возврат "";
КонецФункции

Функция СтрокаВЧисло(знач СтрЗначение)
	Возврат СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗначение);
КонецФункции

Функция СтрокаВBase64(знач Значение) Экспорт
	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзСтроки(Значение);
	Возврат СтрЗаменить(Base64Строка(ДвоичныеДанные), Символы.ПС, "");
КонецФункции

#КонецОбласти
