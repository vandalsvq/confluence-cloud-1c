
&НаКлиентеНаСервереБезКонтекста
Процедура confluence_ApiClientServerReuse_content_types(Форма)
	ИмяТеста = "confluence_ApiClientServerReuse.content_types";
	
	Результат = confluence_ApiClientServerReuse.content_types();
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗафиксироватьРезультат(Форма, ИмяТеста, "Возвращаемый тип не структура");
	ИначеЕсли Результат.Количество() = 0 Тогда
		ЗафиксироватьРезультат(Форма, ИмяТеста, "Структура пустая");
	Иначе 
		ЗафиксироватьРезультат(Форма, ИмяТеста);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура confluence_ApiClientServerReuse_url_params(Форма)
	ИмяТеста = "confluence_ApiClientServerReuse.url_params";
	
	АдресСервера = Форма.Объект.АдресСервера;
	
	ЦелеваяСтруктура = Новый Структура;
	ЦелеваяСтруктура.Вставить("АдресСервера"			, СокрЛП(НРег(АдресСервера)));
	ЦелеваяСтруктура.Вставить("ЗащищенноеСоединение"	, Истина);
	ЦелеваяСтруктура.Вставить("СерверHTTP"				, "demo.atlassian.net");
	ЦелеваяСтруктура.Вставить("АдресСервераWiki"		, АдресСервера + "/wiki"); 
	
	Результат = confluence_ApiClientServerReuse.url_params(АдресСервера);
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗафиксироватьРезультат(Форма, ИмяТеста, "Возвращаемый тип не структура");
	Иначе
		РезультатСравнения = СтруктурыРавны(Результат, ЦелеваяСтруктура);
		ЗафиксироватьРезультат(Форма, ИмяТеста, РезультатСравнения);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура confluence_ApiClientServer_get_connection_settings(Форма)
	ИмяТеста = "confluence_ApiClientServer.get_connection_settings";
	
	АдресСервера = Форма.Объект.АдресСервера;
	
	ПараметрыСервера = confluence_ApiClientServerReuse.url_params(АдресСервера); 
	
	ЦелеваяСтруктура = Новый Структура;
	ЦелеваяСтруктура.Вставить("Сервер"					, "demo.atlassian.net");
	ЦелеваяСтруктура.Вставить("ЗащищенноеСоединение"	, Истина);
	ЦелеваяСтруктура.Вставить("АдресСервераWiki"		, АдресСервера + "/wiki");
	ЦелеваяСтруктура.Вставить("СтрокаАвторизации"		, "");
	
	Результат = confluence_ApiClientServer.get_connection_settings(АдресСервера, "", "");

	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗафиксироватьРезультат(Форма, ИмяТеста, "Возвращаемый тип не структура");
	Иначе
		РезультатСравнения = СтруктурыРавны(Результат, ЦелеваяСтруктура);
		ЗафиксироватьРезультат(Форма, ИмяТеста, РезультатСравнения);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура confluence_ApiClientServer_get_all_spaces_params(Форма)
	ИмяТеста = "confluence_ApiClientServer.get_all_spaces_params";
	
	СписокСвойств = "Общие,Действующие,Метка,Избранное,Начало,Количество,Информация";
	
	Результат = confluence_ApiClientServer.get_all_spaces_params();
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗафиксироватьРезультат(Форма, ИмяТеста, "Возвращаемый тип не структура");
	Иначе
		РезультатСравнения = СвойстваСуществуют(Результат, СписокСвойств);
		ЗафиксироватьРезультат(Форма, ИмяТеста, РезультатСравнения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Функция ЗаполнитьСписокТестов()
	ДобавитьТест("confluence_ApiClientServerReuse", "content_types");
	ДобавитьТест("confluence_ApiClientServerReuse", "url_params");
	ДобавитьТест("confluence_ApiClientServer", "get_connection_settings");
	ДобавитьТест("confluence_ApiClientServer", "get_all_spaces_params");
	ДобавитьТест("", "");
	ДобавитьТест("", "");
	ДобавитьТест("", "");
	ДобавитьТест("", "");
	ДобавитьТест("", "");
	ДобавитьТест("", "");
	ДобавитьТест("", "");
	ДобавитьТест("", "");
	ДобавитьТест("", "");
КонецФункции

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Объект.АдресСервера = "https://demo.atlassian.net";

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Объект.СписокТестов.Очистить();
	
	ЗаполнитьСписокТестов();
	
	ЗаполнитьСписокРазделов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗапускТестов(Команда)
	
	Объект.РезультатТестов.Очистить();
	
	МассивРазделов = Новый Массив;
	Для Каждого ЭлементСписка Из ЭтотОбъект.СписокРазделов Цикл
		Если НЕ ЭлементСписка.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		МассивРазделов.Добавить(ЭлементСписка.Значение);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из Объект.СписокТестов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Тест) Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивРазделов.Найти(СтрокаТаблицы.ИмяРаздела) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЗапуститьТестПоСтроке(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоОшибки(Команда)
	Элементы.РезультатТестовТолькоОшибки.Пометка = НЕ Элементы.РезультатТестовТолькоОшибки.Пометка;
	
	УстановитьОтборРезультатТестов();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте 
Процедура УстановитьОтборРезультатТестов()
	СтруктураОтбора = Новый Структура;
	Если Элементы.РезультатТестовТолькоОшибки.Пометка Тогда
		СтруктураОтбора.Вставить("Успешно", Ложь);
	КонецЕсли;
	
	Элементы.РезультатТестов.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
КонецПроцедуры

&НаКлиенте 
Процедура ЗаполнитьСписокРазделов()
	Для Каждого СтрокаТаблицы Из Объект.СписокТестов Цикл
		Если ЭтотОбъект.СписокРазделов.НайтиПоЗначению(СтрокаТаблицы.ИмяРаздела) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтотОбъект.СписокРазделов.Добавить(СтрокаТаблицы.ИмяРаздела,, Истина);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СверкаЗначений

&НаКлиентеНаСервереБезКонтекста	
Функция ЗначенияРавны(знач знач1, знач знач2)
	Тип1 = ТипЗнч(знач1);
	Тип2 = ТипЗнч(знач2);
	
	Если Тип1 <> Тип2 Тогда
		Возврат СтрШаблон("Типы значений не совпадают (%1, %2) (%3, %4)",
			Строка(Тип1), Строка(Тип2),
			Строка(знач1), Строка(знач2));
	ИначеЕсли знач1 <> знач2 Тогда
		Возврат СтрШаблон("Значения не равны (%1, %2)", Строка(знач1), Строка(знач2));
	КонецЕсли;
	
	Возврат "";
КонецФункции

&НаКлиентеНаСервереБезКонтекста	
Функция СтруктурыРавны(знач Исходная, знач Целевая)
	Если Исходная.Количество() <> Целевая.Количество() Тогда 
		Возврат СтрШаблон("Количество значений не равно целевому (%1)", Строка(Целевая.Количество()));
	Иначе 
		Для Каждого КлючИЗначение Из Целевая Цикл
			ИсхЗначение = Неопределено;
			
			Если НЕ Исходная.Свойство(КлючИЗначение.Ключ, ИсхЗначение) Тогда
				Возврат СтрШаблон("Не найдено свойство ""%1""", КлючИЗначение.Ключ);
			Иначе
				РезультатСравнения = ЗначенияРавны(ИсхЗначение, КлючИЗначение.Значение);
				
				Если НЕ ПустаяСтрока(РезультатСравнения) Тогда
					Возврат СтрШаблон("Ошибка свойства ""%1"". %2",
						КлючИЗначение.Ключ,
						РезультатСравнения);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат "";			
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СвойстваСуществуют(знач Структура, знач СписокСвойств)
	СтрМассив = СтрРазделить(СписокСвойств, ",", Ложь);
	Для Каждого ИмяСвойства Из СтрМассив Цикл
		ИмяСвойства = СокрЛП(ИмяСвойства);
		Если НЕ Структура.Свойство(ИмяСвойства) Тогда
			Возврат СтрШаблон("Свойства %1 не существует", ИмяСвойства);
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Обслуживание

&НаКлиенте 
Процедура ДобавитьТест(знач ИмяРаздела, знач ИмяМетода, знач НаКлиенте = Истина, знач НаСервере = Истина)
	Если НЕ ЗначениеЗаполнено(ИмяРаздела) Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ИмяМетода) Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяТеста = ИмяРаздела + "_" + ИмяМетода;
	
	СтрокаТаблицы = Объект.СписокТестов.Добавить();
	СтрокаТаблицы.ИмяРаздела	= ИмяРаздела;
	СтрокаТаблицы.ИмяМетода		= ИмяМетода;
	СтрокаТаблицы.Тест			= ИмяТеста;
	СтрокаТаблицы.НаКлиенте		= НаКлиенте;
	СтрокаТаблицы.НаСервере		= НаСервере;
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьТестПоСтроке(знач СтрокаТаблицы)
	Если СтрокаТаблицы.НаКлиенте Тогда
		ВызватьМетод_НаКлиенте(СтрокаТаблицы.Тест);
	КонецЕсли;
	
	Если СтрокаТаблицы.НаСервере Тогда
		ВызватьМетод_НаСервере(СтрокаТаблицы.Тест);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ВызватьМетод_НаКлиенте(знач ИмяМетода)
	Выполнить ИмяМетода + "(ЭтотОбъект)";
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста	
Процедура ЗафиксироватьРезультат(Форма, знач ИмяТеста, знач ОписаниеОшибки = "")
	#Если Клиент Тогда
	    Директива = "НаКлиенте";
	#Иначе
		Директива = "НаСервере";
	#КонецЕсли 
	
	СтрокаТаблицы = Форма.Объект.РезультатТестов.Добавить();
	СтрокаТаблицы.Тест = ИмяТеста;
	СтрокаТаблицы.Успешно	= ПустаяСтрока(ОписаниеОшибки);
	СтрокаТаблицы.Директива	= Директива;
	СтрокаТаблицы.Описание	= ОписаниеОшибки;
КонецПроцедуры

&НаСервере 
Процедура ВызватьМетод_НаСервере(знач ИмяМетода)
	Выполнить ИмяМетода + "(ЭтотОбъект)";
КонецПроцедуры

#КонецОбласти
