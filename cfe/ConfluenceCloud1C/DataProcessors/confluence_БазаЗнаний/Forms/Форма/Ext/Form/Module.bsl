
#Область УправлениеФормой

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, ИмяРеквизита)

	Если НЕ Обработано.Найти(ИмяРеквизита) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Обработано.Добавить(ИмяРеквизита);

	Элементы	= Форма.Элементы;
	Объект		= Форма.Объект;
	
	ПанельНастройкиОтбора = (Элементы.ФормаОткрытьНастройкиПоиска.Пометка = Истина);

	#Область Наборы
	
	Если ИмяРеквизита = "РеквизитыПериодСоздания" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, "ДатаСозданияОт");
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, "ДатаСозданияДо");
	КонецЕсли;
	
	Если ИмяРеквизита = "РеквизитыПериодИзменения" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, "ДатаИзмененияОт");
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, "ДатаИзмененияДо");
	КонецЕсли;

	Если ИмяРеквизита = "РеквизитыРежимПоиска" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, "ПанельСодержаниеПоиск");
		//УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, "ГруппаРезультат");
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Элементы
	
	Если ИмяРеквизита = "КлючПространства" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"КлючПространства", "Видимость", НЕ Объект.СкрытьПолеВводаРаздела);
	КонецЕсли;
 	
	Если ИмяРеквизита = "ФормаВРежимеОтладки" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ФормаВРежимеОтладки", "Видимость", Форма.ЭтоАдминистратор);
	КонецЕсли;
 	
	Если ИмяРеквизита = "ГруппаВложения" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ГруппаВложения", "Видимость", Элементы.ВложенияСтраницы.Пометка);
	КонецЕсли;
 	
	Если ИмяРеквизита = "ПанельСодержаниеПоиск" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		СтраницаПанели = ?(Элементы.ФормаОткрытьНастройкиПоиска.Пометка,
			Элементы.СтраницаПоиск, Элементы.СтраницаСодержание);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ПанельСодержаниеПоиск", "ТекущаяСтраница", СтраницаПанели);
	КонецЕсли;
	
	Если ИмяРеквизита = "ДатаСозданияОт" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ДатаСозданияОт", "Видимость", Форма.ПериодСоздания = 5);
	КонецЕсли;

	Если ИмяРеквизита = "ДатаСозданияДо" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ДатаСозданияДо", "Видимость", Форма.ПериодСоздания = 5);
	КонецЕсли;

	Если ИмяРеквизита = "ДатаИзмененияОт" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ДатаИзмененияОт", "Видимость", Форма.ПериодИзменения = 5);
	КонецЕсли;

	Если ИмяРеквизита = "ДатаИзмененияДо" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ДатаИзмененияДо", "Видимость", Форма.ПериодИзменения = 5);
	КонецЕсли;
	
	#КонецОбласти 
	
	#Область ТабЧасть_Имя
	
	//Если ИмяРеквизита = "ИмяТабличнойЧастиОтветственный" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
	//	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
	//		"ИмяТабличнойЧастиОтветственный", "ТолькоПросмотр", ЗначениеЗаполнено(Объект.Ответственный));
	//КонецЕсли;

	#КонецОбласти
	
	#Область Команды
	
	Если ИмяРеквизита = "КомандаОткрытьНастройкиПользователя" ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ФормаОткрытьНастройки", "Видимость", Форма.ЭтоАдминистратор);
	КонецЕсли;

	#КонецОбласти 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьУсловноеОформление(Форма, ИменаРеквизитов = "")

	Если ТипЗнч(ИменаРеквизитов) = Тип("Строка") Тогда
		Если ПустаяСтрока(ИменаРеквизитов) Тогда
			МассивИмен = Новый Массив;
			МассивИмен.Добавить("");
		Иначе
			МассивИмен = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаРеквизитов, ",");
		КонецЕсли;
	ИначеЕсли ТипЗнч(ИменаРеквизитов) = Тип("Массив") Тогда
		МассивИмен = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ИменаРеквизитов);
	Иначе
		Возврат;
	КонецЕсли;
 
	//Форма.ТолькоПросмотр = (Форма.СостоянияЗаблокировано.Найти(Форма.СведенияОЗаявкеСостояние) <> Неопределено);

	Обработано = Новый Массив;
	Для Каждого ИмяРеквизита Из МассивИмен Цикл
		УстановитьУсловноеОформлениеРеквизита(Форма, Обработано, СокрЛП(ИмяРеквизита));
	КонецЦикла;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьЗаголовокВложенияСтраницы(Форма)
	КолВложений = Формат(Форма.Вложения.Количество(), "ЧН=-; ЧГ=");
	ТекстЗаголовок = СтрШаблон(НСтр("ru='Вложения (%1)'"), КолВложений);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы,
		"ВложенияСтраницы", "Заголовок", ТекстЗаголовок);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Процедура УстановитьКартинкуИзбраннаяСтраница(Форма)
	Если НЕ ЗначениеЗаполнено(Форма.ТекущаяСтраницаИдентификатор) Тогда
		ЗначКартинка = БиблиотекаКартинок.Избранное;
	КонецЕсли;
	
	Элементы = Форма.Элементы;

	Если Форма.ИзбранныеСтраницы.НайтиПоЗначению(Форма.ТекущаяСтраницаИдентификатор) = Неопределено Тогда
		Элементы.ПометкаИзбранное.Картинка = БиблиотекаКартинок.Избранное;
	Иначе 
		Элементы.ПометкаИзбранное.Картинка = БиблиотекаКартинок.ДобавитьВИзбранное;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КлючПространстваПриИзменении(Элемент)
	
	ОбновитьДеревоСтраницНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	СсылкаЭтоКартинка	= (НРег(ДанныеСобытия.Element.nodeName) = "img");
	СсылкаИзБазыЗнаний	= (СтрНачинаетсяС(ДанныеСобытия.Href, Объект.АдресСервера));
	
	ОбработкаВозможна	= (СсылкаЭтоКартинка ИЛИ СсылкаИзБазыЗнаний);
	Если НЕ ОбработкаВозможна Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Если ДанныеСобытия.Anchor = Неопределено Тогда
			ДанныеСсылки = ПолучитьДанныеСсылкиПоЭлементу(ДанныеСобытия.Element);
		Иначе 
			ДанныеСсылки = ПолучитьДанныеСсылкиПоЭлементу(ДанныеСобытия.Anchor);
		КонецЕсли;		
	Исключение
		ДанныеСсылки = ПолучитьДанныеСсылкиПоЭлементу(Новый Структура);
	КонецПопытки;
	
	ПолныйАдресСсылки		= ДанныеСобытия.href;
	ЗаголовокСсылки			= ДанныеСсылки.text;
	ТипДанныхСсылки			= ДанныеСсылки.linkedResourceType;
	ИдентификаторСтраницы	= ДанныеСсылки.linkedResourceId;
	
	// проверим на наличие короткой ссылки
	Если СтрНачинаетсяС(ДанныеСсылки.pathName, "/l/c/") ИЛИ СтрНачинаетсяС(ДанныеСсылки.pathName, "/wiki/x/") Тогда
		НастройкиПодключения = ПолучитьНастройкиПодключения(Объект);
		ПолнаяСсылка = confluence_ApiClientServer.get_long_url(НастройкиПодключения, ДанныеСобытия.Href);
		Если НЕ ПустаяСтрока(ПолнаяСсылка) Тогда
			ДеталиСсылки = РазобратьАдресСсылки(ПолнаяСсылка);
			Если НЕ ПустаяСтрока(ДеталиСсылки.Страница) Тогда
				ТипДанныхСсылки			= "page";
				ИдентификаторСтраницы	= ДеталиСсылки.Страница;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипДанныхСсылки = "page" Тогда
		СтандартнаяОбработка = Ложь;
		ВыполнитьПереходНаСтраницу(ИдентификаторСтраницы, ЗаголовокСсылки);
	ИначеЕсли СсылкаЭтоКартинка = Истина Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ДанныеСсылки.imageSrc) Тогда
			ОткрытьКартинкуВНовомОкне(ДанныеСсылки.imageSrc);
		Иначе 
			ОткрытьКартинкуВНовомОкне(ДанныеСсылки.src);
		КонецЕсли;
	ИначеЕсли ЭтоСсылкаДляСкачивания(ДанныеСобытия.Anchor) Тогда 
		СтандартнаяОбработка = Ложь;
		ВыполнитьСкачиваниеПоСсылкеНаКлиенте(ДанныеСобытия.Anchor);
	ИначеЕсли НЕ ПустаяСтрока(ПолныйАдресСсылки) И Объект.ОткрыватьВнешниеСсылкиВ1С = Ложь Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьВнешнююСсылку(ПолныйАдресСсылки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодСозданияПриИзменении(Элемент)
	
	СтруктураПериод = ПолучитьПериодПоЗначению(ЭтотОбъект.ПериодСоздания);
	Если ЭтотОбъект.ПериодСоздания <> 5 Тогда
		ЭтотОбъект.ДатаСозданияОт = СтруктураПериод.Начало;
		ЭтотОбъект.ДатаСозданияДо = СтруктураПериод.Конец;
	КонецЕсли;
	
	УстановитьУсловноеОформление(ЭтотОбъект, "РеквизитыПериодСоздания");
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодИзмененияПриИзменении(Элемент)
	
	СтруктураПериод = ПолучитьПериодПоЗначению(ЭтотОбъект.ПериодИзменения);
	Если ЭтотОбъект.ПериодИзменения <> 5 Тогда
		ЭтотОбъект.ДатаИзмененияОт = СтруктураПериод.Начало;
		ЭтотОбъект.ДатаИзмененияДо = СтруктураПериод.Конец;
	КонецЕсли;
	
	УстановитьУсловноеОформление(ЭтотОбъект, "РеквизитыПериодИзменения");
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ВыполнитьПоискНаКлиенте(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПереключениеСтраницОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПерваяСтраница" Тогда
		ВыполнитьПоискНаКлиенте(1);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПредыдущаяСтраница" И ЭтотОбъект.ТекущаяСтраницаПоиска - 1 > 0 Тогда
		ВыполнитьПоискНаКлиенте(ЭтотОбъект.ТекущаяСтраницаПоиска - 1);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СледующаяСтраница" И ЭтотОбъект.ТекущаяСтраницаПоиска + 1 <= ЭтотОбъект.КоличествоСтраниц Тогда
		ВыполнитьПоискНаКлиенте(ЭтотОбъект.ТекущаяСтраницаПоиска + 1);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоследняяСтраница" Тогда
		ВыполнитьПоискНаКлиенте(ЭтотОбъект.КоличествоСтраниц);
	ИначеЕсли СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "Страница_") Тогда
		СтрНомерСтраницы = Сред(НавигационнаяСсылкаФорматированнойСтроки, 10);
		ВыполнитьПоискНаКлиенте(Число(СтрНомерСтраницы));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ДеревоСтраниц

&НаКлиенте
Процедура ДеревоСтраницПередРазворачиванием(Элемент, Строка, Отказ)
	ТекущиеДанные = ЭтотОбъект.ДеревоСтраниц.НайтиПоИдентификатору(Строка);
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПодчиненныеЗаполнены Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПодчиненныеСтраницыДереваНаКлиенте(ТекущиеДанные, ТекущиеДанные.Идентификатор);
	ТекущиеДанные.ПодчиненныеЗаполнены = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСтраницВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ДеревоСтраниц.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ТекущаяСтраницаИдентификатор = ТекущиеДанные.Идентификатор Тогда
		ВыполнитьПереходНаСтраницу(ТекущиеДанные.Идентификатор, ТекущиеДанные.Заголовок);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_РезультатПоиска

&НаКлиенте
Процедура РезультатПоискаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РезультатПоиска.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "РезультатПоискаЗаголовок" И ЗначениеЗаполнено(ТекущиеДанные.Идентификатор) Тогда
		СтандартнаяОбработка = Ложь;
		ВыполнитьПереходНаСтраницу(ТекущиеДанные.Идентификатор, ТекущиеДанные.Заголовок);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
 
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.БазаЗнанийСсылка = Справочники.confluence_БазыЗнаний.ПолучитьЭлементПоУмолчанию();
	
	ЗаполнитьНастройкиИзХранилищаНаСервере();
	
	НачальнаяСтраница	= Обработки.confluence_БазаЗнаний.ПолучитьМакет("НачальнаяСтраница");
	МакетРезультат		= Обработки.confluence_БазаЗнаний.ПолучитьМакет("МакетРезультатПоиска");
	СтрокаРезультат		= Обработки.confluence_БазаЗнаний.ПолучитьМакет("СтрокаРезультатПоиска");
	СовпаденийНеНайдено	= Обработки.confluence_БазаЗнаний.ПолучитьМакет("СовпаденийНеНайдено");
	
	ЭтотОбъект.МакетНачальнаяСтраница	= НачальнаяСтраница.ПолучитьТекст();
	ЭтотОбъект.МакетОснование			= МакетРезультат.ПолучитьТекст();
	ЭтотОбъект.МакетСтрокаРезультата	= СтрокаРезультат.ПолучитьТекст();
	ЭтотОбъект.МакетСовпаденийНеНайдено	= СовпаденийНеНайдено.ПолучитьТекст();
	
	ЭтотОбъект.ТекущийПользователь	= Пользователи.ТекущийПользователь();
	ЭтотОбъект.ЭтоАдминистратор		= Пользователи.РолиДоступны("confluence_Администратор");
	
	// установим параметры в реквизиты
	Если ЗначениеЗаполнено(Параметры.КлючПространства) Тогда
		Объект.КлючПространства = Параметры.КлючПространства;
		ЭтотОбъект.ТекущаяСтраницаИдентификатор	= Параметры.ИдентификаторСтраницы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
	    ПоказатьПредупреждение(, НСтр("ru='Веб-клиент не поддерживается. Рекомендуем использовать тонкий клиент.'"), 60); 
		Отказ = Истина;
		Возврат;
	#КонецЕсли 
	
	Если НЕ ЗначениеЗаполнено(Объект.АдресСервера) Тогда
		ПредложитьВыполнитьНастройкиНаКлиенте();
	Иначе 
		ОбновитьНачальныеДанныеФормыНаКлиенте();
	КонецЕсли;
	
	ОбновитьНумерациюСтраницПоиска();
	ОбновитьИтоговуюСтатистикуПоиска();
	
	Если ЗначениеЗаполнено(Объект.КлючПространства) И ЗначениеЗаполнено(ЭтотОбъект.ТекущаяСтраницаИдентификатор) Тогда
		ВыполнитьПереходНаСтраницу(ЭтотОбъект.ТекущаяСтраницаИдентификатор, "...");
	КонецЕсли;
	
	УстановитьУсловноеОформление(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПолученияНавигационнойСсылки(Ключ, Представление, НавигационнаяСсылка, СтандартнаяОбработка)
	
	// Задел для реализации в платформе 8.3.19
	//Если НЕ ЗначениеЗаполнено(ЗначениеЗаполнено(Объект.КлючПространства)) ИЛИ НЕ ЗначениеЗаполнено(ЭтотОбъект.ТекущаяСтраницаИдентификатор) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//СтандартнаяОбработка = Ложь;
	//
	//ПредставлениеПространства = Элементы.КлючПространства.СписокВыбора.НайтиПоЗначению(Объект.КлючПространства);
	//
	//Представление = СтрШаблон(НСтр("ru='База знаний: %1 (%2)'"),
	//	ЭтотОбъект.ТекущаяСтраницаПредставление,
	//	ПредставлениеПространства);
	//
	//НавигационнаяСсылка = ПолучитьНавигационнуюСсылкуНаСервере(Представление,
	//	Объект.КлючПространства,
	//	ЭтотОбъект.ТекущаяСтраницаИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьНастройкиПользователя(Команда)
	
	ОткрытьФормуНастройкиНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиПоиска(Команда)
	Элементы.ФормаОткрытьНастройкиПоиска.Пометка = НЕ Элементы.ФормаОткрытьНастройкиПоиска.Пометка;
	
	УстановитьУсловноеОформление(ЭтотОбъект, "РеквизитыРежимПоиска");
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоиск(Команда)
	
	ВыполнитьПоискНаКлиенте(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущуюСтраницу(Команда)
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ТекущаяСтраницаИдентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПереходНаСтраницу(ЭтотОбъект.ТекущаяСтраницаИдентификатор, ЭтотОбъект.ТекущаяСтраницаПредставление);
КонецПроцедуры

&НаКлиенте
Асинх Процедура СохранитьКакPDF(Команда)
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ТекущаяСтраницаИдентификатор) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Откройте статью базы знаний для сохранения'"), 30);
		Возврат;
	КонецЕсли;
	
	ПутьНаКлиенте = Ждать confluence_FileSystemAsync.ВыбратьФайл(РежимДиалогаВыбораФайла.Сохранение,
		НСтр("ru='Документ PDF'") + "(*.pdf)|*.pdf",
		НСтр("ru='Укажите путь для сохранения файла'"),
		ЭтотОбъект.ТекущаяСтраницаПредставление + ".pdf");
	
	Если НЕ ЗначениеЗаполнено(ПутьНаКлиенте) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не указан путь для сохранения файла'"), 30);
		Возврат;
	КонецЕсли;
	
	Если Команда.Имя = "СохранитьКакPDFВФоне" Тогда
		ЭкспортСтатьиPDFВФонеНаКлиенте(ПутьНаКлиенте);
	Иначе 
		ЭкспортСтатьиPDFНаКлиенте(ПутьНаКлиенте);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Асинх Процедура СохранитьКакWord(Команда)
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ТекущаяСтраницаИдентификатор) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Откройте статью базы знаний для сохранения'"), 30);
		Возврат;
	КонецЕсли;
	
	ПутьНаКлиенте = Ждать confluence_FileSystemAsync.ВыбратьФайл(РежимДиалогаВыбораФайла.Сохранение,
		НСтр("ru='Документ Word'") + "(*.doc)|*.doc",
		НСтр("ru='Укажите путь для сохранения файла'"),
		ЭтотОбъект.ТекущаяСтраницаПредставление + ".doc");
	
	Если НЕ ЗначениеЗаполнено(ПутьНаКлиенте) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не указан путь для сохранения файла'"), 30);
		Возврат;
	КонецЕсли;
	
	НастройкиПодключения = ПолучитьНастройкиПодключения(Объект);
	
	Результат = confluence_ApiClientServer.get_page_as_word(НастройкиПодключения, ЭтотОбъект.ТекущаяСтраницаИдентификатор);
	Если НЕ ТипЗнч(Результат) = Тип("ДвоичныеДанные") Тогда
		confluence_ApiClientServer.check_error(Результат, Истина);
		Возврат;
	КонецЕсли;
		
	Ждать Результат.ЗаписатьАсинх(ПутьНаКлиенте);
	
	Оповещение = ПолучитьОповещениеОткрытьФайл(ПутьНаКлиенте);
	
	ПоказатьОповещениеПользователя(НСтр("ru='Запись выполнена'"),
		Оповещение,
		НСтр("ru='Файл Word сохранен. Нажмите для открытия'"),
		БиблиотекаКартинок.Информация);
КонецПроцедуры

&НаКлиенте
Процедура ВложенияСтраницы(Команда)
	Элементы.ВложенияСтраницы.Пометка = НЕ Элементы.ВложенияСтраницы.Пометка;
	
	УстановитьУсловноеОформление(ЭтотОбъект, "ГруппаВложения");
КонецПроцедуры

&НаКлиенте
Процедура СкачатьВложение(Команда)
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не выбран файл для сохранения'"), 30);
		Возврат;
	КонецЕсли;
	
	ВыполнитьСкачиваниеВложенияНаКлиенте(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСимвол(Команда)
	ИмяСимвола = СтрЗаменить(Команда.Имя, "ДобавитьСимвол", "");
	
	Если ИмяСимвола = "Звездочка" Тогда
		ЗначСимвол = "*";
	ИначеЕсли ИмяСимвола = "Вопрос" Тогда
		ЗначСимвол = "?";
	ИначеЕсли ИмяСимвола = "Тильда" Тогда
		ЗначСимвол = "~";
	Иначе 
		ЗначСимвол = "";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗначСимвол) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.СтрокаПоиска = СокрЛП(ЭтотОбъект.СтрокаПоиска) + ЗначСимвол + " ";
КонецПроцедуры

&НаКлиенте
Процедура ПометкаИзбранное(Команда)
	ИзменитьПризнакИзбранноеСтраницыНаКлиенте();
	УстановитьКартинкуИзбраннаяСтраница(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ЗавершениеНемодальныхВызовов

&НаКлиенте
Процедура ВыполнениеНастройкиЗавершение(Результат, ДопПараметры) Экспорт	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНастройкиИзХранилищаНаСервере();
	
	Если ПустаяСтрока(Объект.АдресСервера) Тогда
		Возврат;
	КонецЕсли;
		
	ОбновитьНачальныеДанныеФормыНаКлиенте();
	
	УстановитьУсловноеОформление(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте 
Процедура ОткрытьФайлКаталогЗавершение(ДопПараметры) Экспорт 
	Если НЕ ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопПараметры, "ПутьКФайлу", "");
	Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
		ЗапуститьПриложение(ПутьКФайлу,, Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте 
Асинх Процедура ВыполнитьСкачиваниеПоСсылкеНаКлиенте(знач Anchor)
	РасширениеПодключено = Ждать confluence_FileSystemAsync.ПодключитьРасширениеДляРаботыСФайлами();
	Если НЕ РасширениеПодключено Тогда
		confluence_FileSystemAsync.СообщитьОшибкуПодключенияРасширения();
		Возврат;
	КонецЕсли;
	
	ДанныеСсылки = ПолучитьДанныеСсылкиДляСкачивания(Anchor);
	Если ДанныеСсылки = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Данные для скачивания не определены. Попробуйте еще раз.'"), 30);
		Возврат;
	КонецЕсли;
	
	Если ДанныеСсылки.СкачатьВсе Тогда
		Ответ = Ждать ВопросАсинх(НСтр("ru='Скачивание всех файлов может занять длительное время. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет,, КодВозвратаДиалога.Нет);
			
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	МассивВложений = Новый Массив;
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Вложения Цикл
		Если ДанныеСсылки.СкачатьВсе Тогда
			МассивВложений.Добавить(СтрокаТаблицы);
		ИначеЕсли СокрЛП(СтрокаТаблицы.Заголовок) = СокрЛП(ДанныеСсылки.ИмяФайла) Тогда
			МассивВложений.Добавить(СтрокаТаблицы);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если МассивВложений.Количество() = 0 Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не удалось определить идентификатор файла для скачивания.'"), 60);
		Возврат;
	КонецЕсли;
	
	Если ДанныеСсылки.СкачатьВсе Тогда
		ПутьНаКлиенте = Ждать confluence_FileSystemAsync.ВыбратьФайл(РежимДиалогаВыбораФайла.ВыборКаталога,,
			НСтр("ru='Укажите путь для сохранения файлов'"));
	Иначе
		ПутьНаКлиенте = Ждать confluence_FileSystemAsync.ВыбратьФайл(РежимДиалогаВыбораФайла.Сохранение,,
			НСтр("ru='Укажите путь для сохранения файла'"),
			ДанныеСсылки.ИмяФайла);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ПутьНаКлиенте) Тогда
		Возврат;
	КонецЕсли;
		
	НастройкиПодключения = ПолучитьНастройкиПодключения(Объект);

	Счетчик = 0;
	Колво	= МассивВложений.Количество();
	Для Каждого СтрокаВложения Из МассивВложений Цикл
		Счетчик = Счетчик + 1;
		
		Состояние(НСтр("ru='Скачивание файла'"), Цел(Счетчик / Колво * 100), СтрокаВложения.Заголовок, БиблиотекаКартинок.Информация);
		
		Результат = confluence_ApiClientServer.get_binarydata_file(НастройкиПодключения,
			ЭтотОбъект.ТекущаяСтраницаИдентификатор,
			СтрокаВложения.Идентификатор);
			
		Если НЕ ТипЗнч(Результат) = Тип("ДвоичныеДанные") Тогда
			confluence_ApiClientServer.check_error(Результат, Истина);
			Возврат;
		КонецЕсли;
		
		Если ДанныеСсылки.СкачатьВсе Тогда
			ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ПутьНаКлиенте, СтрокаВложения.Заголовок);
		Иначе 
			ПутьКФайлу = ПутьНаКлиенте;
		КонецЕсли;
			
		Ждать Результат.ЗаписатьАсинх(ПутьКФайлу);
	КонецЦикла;
	
	Оповещение = ПолучитьОповещениеОткрытьФайл(ПутьНаКлиенте);
	
	Если ДанныеСсылки.СкачатьВсе Тогда
		ТекстОповещения = СтрШаблон(НСтр("ru='Нажмите для открытия каталога'"));
	Иначе 
		ТекстОповещения = СтрШаблон(НСтр("ru='Нажмите для открытия файла ""%1""'"), ДанныеСсылки.ИмяФайла);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(НСтр("ru='Запись выполнена'"),
		Оповещение,
		ТекстОповещения,
		БиблиотекаКартинок.Информация);
КонецПроцедуры

&НаКлиенте 
Асинх Процедура ВыполнитьСкачиваниеВложенияНаКлиенте(знач СтрокаВложения)
	РасширениеПодключено = Ждать confluence_FileSystemAsync.ПодключитьРасширениеДляРаботыСФайлами();
	Если НЕ РасширениеПодключено Тогда
		confluence_FileSystemAsync.СообщитьОшибкуПодключенияРасширения();
		Возврат;
	КонецЕсли;
	
	ПутьНаКлиенте = Ждать confluence_FileSystemAsync.ВыбратьФайл(РежимДиалогаВыбораФайла.Сохранение,,
		НСтр("ru='Укажите путь для сохранения файла'"),
		СтрокаВложения.Заголовок);
		
	Если НЕ ЗначениеЗаполнено(ПутьНаКлиенте) Тогда
		Возврат;
	КонецЕсли;

	Состояние(НСтр("ru='Скачивание файла'"),, СтрокаВложения.Заголовок, БиблиотекаКартинок.Информация);
		
	НастройкиПодключения = ПолучитьНастройкиПодключения(Объект);
	
	Результат = confluence_ApiClientServer.get_binarydata_file(НастройкиПодключения,
		ЭтотОбъект.ТекущаяСтраницаИдентификатор,
		СтрокаВложения.Идентификатор);
		
	Если НЕ ТипЗнч(Результат) = Тип("ДвоичныеДанные") Тогда
		confluence_ApiClientServer.check_error(Результат, Истина);
		Возврат;
	КонецЕсли;
		
	Ждать Результат.ЗаписатьАсинх(ПутьНаКлиенте);
	
	Оповещение = ПолучитьОповещениеОткрытьФайл(ПутьНаКлиенте);
	
	ТекстОповещения = СтрШаблон(НСтр("ru='Нажмите для открытия файла ""%1""'"), СтрокаВложения.Заголовок);
	ПоказатьОповещениеПользователя(НСтр("ru='Запись выполнена'"),
		Оповещение,
		ТекстОповещения,
		БиблиотекаКартинок.Информация);
КонецПроцедуры

&НаКлиенте 
Асинх Процедура ОткрытьВнешнююСсылку(знач АдресСсылки)
	Ответ = Ждать ВопросАсинх(НСтр("ru='Данная ссылка не может быть открыта в 1С. Вы хотите открыть ссылку в стороннем приложении?'"),
		РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет,, КодВозвратаДиалога.Нет);
		
	Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьПриложение(АдресСсылки,, Ложь);
КонецПроцедуры

&НаКлиенте 
Асинх Процедура ПредложитьВыполнитьНастройкиНаКлиенте()
	Ответ = Ждать ВопросАсинх(НСтр("ru='Обработке требуется выполнить настройку. Открыть форму настройки?'"),
		РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.ОК,, КодВозвратаДиалога.Отмена);
	
	Если НЕ Ответ = КодВозвратаДиалога.ОК Тогда
		ЭтотОбъект.Закрыть();
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуНастройкиНаКлиенте();
КонецПроцедуры

&НаКлиенте 
Процедура ОткрытьФормуНастройкиНаКлиенте()
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнениеНастройкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.confluence_БазаЗнаний.Форма.ФормаНастройки",,
		ЭтотОбъект,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьНачальныеДанныеФормыНаКлиенте()
	ОбновитьТаблицуПространстваНаКлиенте();
	ОбновитьСписокВыбораПространствНаКлиенте();
	ОбновитьДеревоСтраницНаКлиенте();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТаблицуПространстваНаКлиенте()
	ЭтотОбъект.Пространства.Очистить();
	
	РезультатЗапроса = ПолучитьПространстваНаКлиенте();
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиПодключения = ПолучитьНастройкиПодключения(Объект);	
	Для Каждого СтруктураРаздела Из РезультатЗапроса.Значения Цикл
		НоваяСтрока = ЭтотОбъект.Пространства.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураРаздела);
		
		НоваяСтрока.СтраницаИдентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
			СтруктураРаздела.ДомашняяСтраница, "Идентификатор");
			
		НоваяСтрока.СсылкаПросмотр = НастройкиПодключения.АдресСервераWiki + СтруктураРаздела.ДомашняяСтраница.Ссылки.Просмотр;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьСписокВыбораПространствНаКлиенте()
	Элементы.КлючПространства.СписокВыбора.Очистить();
	
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Пространства Цикл
		Элементы.КлючПространства.СписокВыбора.Добавить(СтрокаТаблицы.Ключ, СтрокаТаблицы.Наименование);
	КонецЦикла;
	
	Если Элементы.КлючПространства.СписокВыбора.НайтиПоЗначению(Объект.КлючПространства) = Неопределено Тогда
		Объект.КлючПространства = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьДеревоСтраницНаКлиенте()
	
	ДанныеПространства = ПолучитьДанныеСтраницыПространстваНаСервере();
	Если ПустаяСтрока(ДанныеПространства.Идентификатор) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru='Не указано пространство'"), ,
			"ИдентификаторПространства"); 
		Возврат;
	КонецЕсли;
	
	ДоступныеСтраницы = Новый Массив;
	Для Каждого СтрокаТаблицы Из Объект.ДоступныеСтраницы Цикл 
		ДоступныеСтраницы.Добавить(СтрокаТаблицы.Идентификатор);
	КонецЦикла;
	
	ОбновитьИзбранныеСтраницыНаКлиенте();
	ЗаполнитьПодчиненныеСтраницыДереваНаКлиенте(ЭтотОбъект.ДеревоСтраниц, ДанныеПространства.Идентификатор, ДоступныеСтраницы);
	
КонецПроцедуры

&НаКлиенте 
Процедура ЗаполнитьПодчиненныеСтраницыДереваНаКлиенте(знач ЭлементРодитель, знач ИдентификаторРодитель, знач ДоступныеСтраницы = Неопределено)
	ЭлементРодитель.ПолучитьЭлементы().Очистить();
	
	ЕстьОграничения = (ТипЗнч(ДоступныеСтраницы) = Тип("Массив") И ДоступныеСтраницы.Количество() > 0);
	
	РезультатЗапроса = ПолучитьСтраницыПространстваНаКлиенте(ИдентификаторРодитель);
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиПодключения = ПолучитьНастройкиПодключения(Объект);
	Для Каждого СтруктураКонтента Из РезультатЗапроса.Значения Цикл
		Если ЕстьОграничения И ДоступныеСтраницы.Найти(СтруктураКонтента.Идентификатор) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ЭлементРодитель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураКонтента);
		
		НоваяСтрока.СсылкаПросмотр		= НастройкиПодключения.АдресСервераWiki + СтруктураКонтента.Ссылки.Просмотр;
		НоваяСтрока.КартинкаИзбранное	= ПолучитьИндексПиктограммыИзбранное(ЭтотОбъект, НоваяСтрока.Идентификатор);
		
		// если существуют подчиненные
		Если НоваяСтрока.ЕстьПодчиненные Тогда
			НоваяСтрока.ПолучитьЭлементы().Добавить();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте 
Процедура ИзменитьПризнакИзбранноеСтраницыНаКлиенте()
	ЭтоИзбранное	= НЕ (ЭтотОбъект.ИзбранныеСтраницы.НайтиПоЗначению(ЭтотОбъект.ТекущаяСтраницаИдентификатор) = Неопределено);
	НовоеЗначение	= ?(ЭтоИзбранное, Ложь, Истина);
	
	ИзменитьПризнакИзбранноеСтраницыНаСервере(ЭтотОбъект.ТекущийПользователь,
		Объект.КлючПространства,
		ЭтотОбъект.ТекущаяСтраницаИдентификатор,
		ЭтотОбъект.ТекущаяСтраницаПредставление,
		НовоеЗначение);
		
	Если НовоеЗначение Тогда
		ЭтотОбъект.ИзбранныеСтраницы.Добавить(ЭтотОбъект.ТекущаяСтраницаИдентификатор);
	Иначе 
		ЭлементСписка = ЭтотОбъект.ИзбранныеСтраницы.НайтиПоЗначению(ЭтотОбъект.ТекущаяСтраницаИдентификатор);
		Если ЭлементСписка <> Неопределено Тогда
			ЭтотОбъект.ИзбранныеСтраницы.Удалить(ЭлементСписка);
		КонецЕсли;
	КонецЕсли;
		
	СтрокаДерева = Элементы.ДеревоСтраниц.ТекущиеДанные;
	Если СтрокаДерева <> Неопределено И СтрокаДерева.Идентификатор = ЭтотОбъект.ТекущаяСтраницаИдентификатор Тогда
		СтрокаДерева.КартинкаИзбранное = ПолучитьИндексПиктограммыИзбранное(ЭтотОбъект, СтрокаДерева.Идентификатор);
	Иначе
		ОбновитьПризнакИзбранноеДереваСтраницРекурсивно(ЭтотОбъект.ДеревоСтраниц);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьИзбранныеСтраницыНаКлиенте()
	ЭтотОбъект.ИзбранныеСтраницы.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект.КлючПространства) Тогда
		Возврат;
	КонецЕсли;
	
	МассивИзбранных = ПолучитьИзбранныеСтраницыНаСервере(ЭтотОбъект.ТекущийПользователь, Объект.КлючПространства);
	ЭтотОбъект.ИзбранныеСтраницы.ЗагрузитьЗначения(МассивИзбранных);
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьПризнакИзбранноеДереваСтраницРекурсивно(знач ЭлементРодитель)
	Для Каждого ВложенныйЭлемент Из ЭлементРодитель.ПолучитьЭлементы() Цикл
		ВложенныйЭлемент.КартинкаИзбранное = ПолучитьИндексПиктограммыИзбранное(ЭтотОбъект, ВложенныйЭлемент.Идентификатор);
		ОбновитьПризнакИзбранноеДереваСтраницРекурсивно(ВложенныйЭлемент);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте 
Функция ПолучитьОповещениеОткрытьФайл(знач ПутьКФайлу)
	Возврат Новый ОписаниеОповещения("ОткрытьФайлКаталогЗавершение", ЭтотОбъект, Новый Структура("ПутьКФайлу", ПутьКФайлу));
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПолучитьДанныеСсылкиПоЭлементу(знач Element)
	dataset = Element.dataset;
	
	ИменаКолонок =
	"baseUrl,
	|height,
	|imageSrc,
	|linkedResourceContainerId,
	|linkedResourceContainerVersion,
	|linkedResourceContentType,
	|linkedResourceDefaultAlias,
	|linkedResourceId,
	|linkedResourceType,
	|linkedResourceVersion,
	|mediaId,
	|mediaType,
	|unresolvedCommentCount,
	|width,
	|filename,
	|pathname,
	|type,
	|text,
	|src";
		
	Структура = Новый Структура(ИменаКолонок);
	ЗаполнитьЗначенияСвойств(Структура, Element);
	ЗаполнитьЗначенияСвойств(Структура, dataset);
	
	Если СтрНачинаетсяС(Структура.pathname, "/wiki/spaces/") Тогда
		ДанныеСсылки = РазобратьАдресСсылки(Структура.pathname);
		
		Если НЕ ПустаяСтрока(ДанныеСсылки.Страница) Тогда
			Структура.linkedResourceId		= ДанныеСсылки.Страница;
			Структура.linkedResourceType	= "page";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Структура;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПолучитьДанныеСсылкиДляСкачивания(знач Anchor)
	Если Anchor = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеСсылки = ПолучитьДанныеСсылкиПоЭлементу(Anchor);
	
	РеквизитыСсылки = Новый Структура("origin,pathname", "", "");
	ЗаполнитьЗначенияСвойств(РеквизитыСсылки, Anchor);
	
	ЭтоСкачатьВсе = (РеквизитыСсылки.pathname = "/wiki/download/all_attachments");
	
	Возврат Новый Структура("ИмяФайла,ПутьКФайлу,ТекстЗапроса,СкачатьВсе",
		?(ЭтоСкачатьВсе, "all_attachments.zip", ДанныеСсылки.filename),
		РеквизитыСсылки.origin + РеквизитыСсылки.pathname,
		РеквизитыСсылки.pathname,
		ЭтоСкачатьВсе);
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция РазобратьАдресСсылки(знач АдресСсылки)
	МассивПодстрок = СтрРазделить(АдресСсылки, "/");
	
	Пространство	= "";
	Страница		= "";
	
	ИндексПространства	= МассивПодстрок.Найти("spaces");
	ИндексСтраницы		= МассивПодстрок.Найти("pages");
	ИндексЗаписиБлога	= МассивПодстрок.Найти("blog");
	
	Если НЕ ИндексПространства = Неопределено Тогда
		Пространство = ?(ИндексПространства + 1 <= МассивПодстрок.ВГраница(), МассивПодстрок[ИндексПространства + 1], "");
	КонецЕсли;
	
	Если НЕ ИндексСтраницы = Неопределено Тогда
		Страница = ?(ИндексСтраницы + 1 <= МассивПодстрок.ВГраница(), МассивПодстрок[ИндексСтраницы + 1], "");
	ИначеЕсли НЕ ИндексЗаписиБлога = Неопределено Тогда
		Страница = МассивПодстрок[МассивПодстрок.ВГраница()];
	КонецЕсли;
	
	ПараметрыСтраницы = СтрНайти(Страница, "?");
	Если ПараметрыСтраницы > 0 Тогда
		Страница = Лев(Страница, ПараметрыСтраницы-1);
	КонецЕсли;
	
	ПараметрыСтраницы = СтрНайти(Страница, "#");
	Если ПараметрыСтраницы > 0 Тогда
		Страница = Лев(Страница, ПараметрыСтраницы-1);
	КонецЕсли;
	
	ДанныеСсылки = Новый Структура;
	ДанныеСсылки.Вставить("Пространство", 	Пространство);
	ДанныеСсылки.Вставить("Страница"	, 	Страница);
	
	Возврат ДанныеСсылки
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоСсылкаДляСкачивания(знач Anchor)
	Если Anchor = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеСсылки = ПолучитьДанныеСсылкиДляСкачивания(Anchor);
	Если ДанныеСсылки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяФайлаУказано 	= ЗначениеЗаполнено(ДанныеСсылки.ИмяФайла);
	ПутьКФайлуУказан	= ЗначениеЗаполнено(ДанныеСсылки.ПутьКФайлу);
	ЭтоСсылкаСкачивания	= СтрНачинаетсяС(ДанныеСсылки.ТекстЗапроса, "/wiki/download");
	
	Возврат ИмяФайлаУказано И ПутьКФайлуУказан И ЭтоСсылкаСкачивания;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПолучитьПериодПоЗначению(знач Период)
	СтруктураПериод = Новый Структура("Начало, Конец");
	
	#Если Сервер Тогда
		ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	#Иначе
		ТекущаяДата = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
	#КонецЕсли
	
	// без отбора(0), Последние сутки(1), Последняя неделя(2), Последний месяц(3), Последний год(4), Произвольный период(5)
	Если Период = 1 Тогда
		СтруктураПериод.Начало	= НачалоДня(ТекущаяДата - 1);
		СтруктураПериод.Конец	= ТекущаяДата;
	ИначеЕсли Период = 2 Тогда
		СтруктураПериод.Начало	= ТекущаяДата - confluence_CommonClientServer.НеделяВСекундах();
		СтруктураПериод.Конец	= ТекущаяДата;
	ИначеЕсли Период = 3 Тогда
		СтруктураПериод.Начало	= ДобавитьМесяц(ТекущаяДата, -1);
		СтруктураПериод.Конец	= ТекущаяДата;
	ИначеЕсли Период = 4 Тогда
		СтруктураПериод.Начало	= ДобавитьМесяц(ТекущаяДата, -12);
		СтруктураПериод.Конец	= ТекущаяДата;
	КонецЕсли;
	
	Возврат СтруктураПериод;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоАнонимныйДоступ(знач Объект)
	Возврат НЕ ЗначениеЗаполнено(Объект.ПользовательЛогин) И НЕ ЗначениеЗаполнено(Объект.ПользовательТокен);
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПолучитьИндексПиктограммыФайла(Знач РасширениеФайла)
	
	Если ТипЗнч(РасширениеФайла) <> Тип("Строка")
		ИЛИ ПустаяСтрока(РасширениеФайла) Тогда
		Возврат 0;
	КонецЕсли;
	
	РасширениеФайла = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(РасширениеФайла);
	
	Расширение = "." + НРег(РасширениеФайла) + ";";
	
	Если СтрНайти(".dt;.1cd;.cf;.cfu;", Расширение) <> 0 Тогда
		Возврат 6; // Файлы 1С.
		
	ИначеЕсли Расширение = ".mxl;" Тогда
		Возврат 8; // Табличный Файл.
		
	ИначеЕсли СтрНайти(".txt;.log;.ini;", Расширение) <> 0 Тогда
		Возврат 10; // Текстовый Файл.
		
	ИначеЕсли Расширение = ".epf;" Тогда
		Возврат 12; // Внешние обработки.
		
	ИначеЕсли СтрНайти(".ico;.wmf;.emf;",Расширение) <> 0 Тогда
		Возврат 14; // Картинки.
		
	ИначеЕсли СтрНайти(".htm;.html;.url;.mht;.mhtml;",Расширение) <> 0 Тогда
		Возврат 16; // HTML.
		
	ИначеЕсли СтрНайти(".doc;.dot;.rtf;",Расширение) <> 0 Тогда
		Возврат 18; // Файл Microsoft Word.
		
	ИначеЕсли СтрНайти(".xls;.xlw;",Расширение) <> 0 Тогда
		Возврат 20; // Файл Microsoft Excel.
		
	ИначеЕсли СтрНайти(".ppt;.pps;",Расширение) <> 0 Тогда
		Возврат 22; // Файл Microsoft PowerPoint.
		
	ИначеЕсли СтрНайти(".vsd;",Расширение) <> 0 Тогда
		Возврат 24; // Файл Microsoft Visio.
		
	ИначеЕсли СтрНайти(".mpp;",Расширение) <> 0 Тогда
		Возврат 26; // Файл Microsoft Visio.
		
	ИначеЕсли СтрНайти(".mdb;.adp;.mda;.mde;.ade;",Расширение) <> 0 Тогда
		Возврат 28; // База данных Microsoft Access.
		
	ИначеЕсли СтрНайти(".xml;",Расширение) <> 0 Тогда
		Возврат 30; // xml.
		
	ИначеЕсли СтрНайти(".msg;.eml;",Расширение) <> 0 Тогда
		Возврат 32; // Письмо электронной почты.
		
	ИначеЕсли СтрНайти(".zip;.rar;.arj;.cab;.lzh;.ace;",Расширение) <> 0 Тогда
		Возврат 34; // Архивы.
		
	ИначеЕсли СтрНайти(".exe;.com;.bat;.cmd;",Расширение) <> 0 Тогда
		Возврат 36; // Исполняемые файлы.
		
	ИначеЕсли СтрНайти(".grs;",Расширение) <> 0 Тогда
		Возврат 38; // Графическая схема.
		
	ИначеЕсли СтрНайти(".geo;",Расширение) <> 0 Тогда
		Возврат 40; // Географическая схема.
		
	ИначеЕсли СтрНайти(".jpg;.jpeg;.jp2;.jpe;",Расширение) <> 0 Тогда
		Возврат 42; // jpg.
		
	ИначеЕсли СтрНайти(".bmp;.dib;",Расширение) <> 0 Тогда
		Возврат 44; // bmp.
		
	ИначеЕсли СтрНайти(".tif;.tiff;",Расширение) <> 0 Тогда
		Возврат 46; // tif.
		
	ИначеЕсли СтрНайти(".gif;",Расширение) <> 0 Тогда
		Возврат 48; // gif.
		
	ИначеЕсли СтрНайти(".png;",Расширение) <> 0 Тогда
		Возврат 50; // png.
		
	ИначеЕсли СтрНайти(".pdf;",Расширение) <> 0 Тогда
		Возврат 52; // pdf.
		
	ИначеЕсли СтрНайти(".odt;",Расширение) <> 0 Тогда
		Возврат 54; // Open Office writer.
		
	ИначеЕсли СтрНайти(".odf;",Расширение) <> 0 Тогда
		Возврат 56; // Open Office math.
		
	ИначеЕсли СтрНайти(".odp;",Расширение) <> 0 Тогда
		Возврат 58; // Open Office Impress.
		
	ИначеЕсли СтрНайти(".odg;",Расширение) <> 0 Тогда
		Возврат 60; // Open Office draw.
		
	ИначеЕсли СтрНайти(".ods;",Расширение) <> 0 Тогда
		Возврат 62; // Open Office calc.
		
	ИначеЕсли СтрНайти(".mp3;.wav;.mp4;",Расширение) <> 0 Тогда
		Возврат 64;
		
	ИначеЕсли СтрНайти(".erf;",Расширение) <> 0 Тогда
		Возврат 66; // Внешние отчеты.
		
	ИначеЕсли СтрНайти(".docx;",Расширение) <> 0 Тогда
		Возврат 68; // Файл Microsoft Word docx.
		
	ИначеЕсли СтрНайти(".xlsx;",Расширение) <> 0 Тогда
		Возврат 70; // Файл Microsoft Excel xlsx.
		
	ИначеЕсли СтрНайти(".pptx;",Расширение) <> 0 Тогда
		Возврат 72; // Файл Microsoft PowerPoint pptx.
		
	ИначеЕсли СтрНайти(".p7s;",Расширение) <> 0 Тогда
		Возврат 74; // Файл подписи.
		
	ИначеЕсли СтрНайти(".p7m;",Расширение) <> 0 Тогда
		Возврат 76; // зашифрованное сообщение.
	Иначе
		Возврат 4;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция ПолучитьИндексПиктограммыИзбранное(знач Форма, знач Идентификатор)
	Возврат ?(Форма.ИзбранныеСтраницы.НайтиПоЗначению(Идентификатор) = Неопределено, -1, 0);
КонецФункции

&НаСервереБезКонтекста
Процедура ИзменитьПризнакИзбранноеСтраницыНаСервере(знач Пользователь, знач Пространство, знач Страница, знач Заголовок, знач Признак)
	МенеджерЗаписи = РегистрыСведений.confluence_ИзбранныеСтатьи.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Пользователь	= Пользователь;
	МенеджерЗаписи.Пространство	= Пространство;
	МенеджерЗаписи.Страница		= Страница;
	
	МенеджерЗаписи.Прочитать();
	
	ЕстьЗапись = МенеджерЗаписи.Выбран();
	Если ЕстьЗапись И Признак = Истина Тогда
		Возврат;
	ИначеЕсли НЕ ЕстьЗапись И Признак = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Если Признак Тогда
		МенеджерЗаписи.Пользователь	= Пользователь;
		МенеджерЗаписи.Пространство	= Пространство;
		МенеджерЗаписи.Страница		= Страница;
		МенеджерЗаписи.Заголовок	= Заголовок;
		МенеджерЗаписи.Записать(Истина);
	Иначе 
		МенеджерЗаписи.Удалить();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ПолучитьИзбранныеСтраницыНаСервере(знач Пользователь, знач Пространство)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Пространство", Пространство);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	confluence_ИзбранныеСтатьи.Страница КАК Страница
	|ИЗ
	|	РегистрСведений.confluence_ИзбранныеСтатьи КАК confluence_ИзбранныеСтатьи
	|ГДЕ
	|	confluence_ИзбранныеСтатьи.Пользователь = &Пользователь
	|	И confluence_ИзбранныеСтатьи.Пространство = &Пространство";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Страница");	
КонецФункции

&НаСервере 
Функция ПолучитьНавигационнуюСсылкуНаСервере(знач Представление, знач Пространство, знач Страница)
	Структура = Новый Структура("КлючПространства,ИдентификаторСтраницы", Пространство, Страница);
	Возврат ПолучитьНавигационнуюСсылку(Метаданные.Обработки.confluence_БазаЗнаний)
		+ СтрШаблон("?КлючПространства=%1&ИдентификаторСтраницы=%2", Пространство, Страница);
КонецФункции

&НаСервере 
Процедура ЗаполнитьНастройкиИзХранилищаНаСервере()
	ОбъектФормы	= ЭтотОбъект.РеквизитФормыВЗначение("Объект");
	Настройки	= Обработки.confluence_БазаЗнаний.ПолучитьНастройкиИзХранилища(ОбъектФормы.БазаЗнанийСсылка);
	
	Обработки.confluence_БазаЗнаний.НастройкиВОбъектФормы(ОбъектФормы, Настройки);
	
	ЭтотОбъект.ЗначениеВРеквизитФормы(ОбъектФормы, "Объект");
КонецПроцедуры

&НаСервере 
Функция ПолучитьДанныеСтраницыПространстваНаСервере()
	ДанныеПространства = Новый Структура("Идентификатор,Заголовок", "", "");
	
	СтруктураОтбора = Новый Структура("Ключ", Объект.КлючПространства);
	СтрокиПространства = ЭтотОбъект.Пространства.НайтиСтроки(СтруктураОтбора);
	Если СтрокиПространства.Количество() = 0 Тогда
		Возврат ДанныеПространства;
	КонецЕсли;
	
	ДанныеПространства.Идентификатор	= СтрокиПространства[0].СтраницаИдентификатор;
	ДанныеПространства.Заголовок		= СтрокиПространства[0].Наименование;
		
	Возврат ДанныеПространства;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ОбработкаКартинок

&НаКлиентеНаСервереБезКонтекста 
Процедура ОбработатьКартинкиСтраницыСлужебный(Форма, Настройки, ТекстHTML)
	// кэш адресов временного хранилища с картинками
	Для Каждого ЗначениеСписка Из Форма.АдресаКартинок Цикл
		УдалитьИзВременногоХранилища(ЗначениеСписка.Значение);
	КонецЦикла;
	Форма.АдресаКартинок.Очистить();

	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	
	Построитель = Новый ПостроительDOM;
	ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
	
	ДокументHTML.НормализоватьДокумент();
	
	// проверим необходимость скачивания картинок
	Если ДокументHTML.Картинки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	// скачаем и поместим картинки во временное хранилище
	ЕстьИзменения = Ложь;
	Для Каждого ЭлементКартинкаHTML Из ДокументHTML.Картинки Цикл
		Если НЕ СтрНачинаетсяС(ЭлементКартинкаHTML.БазовыйURI, Настройки.АдресСервераWiki) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторКартинки	= ПолучитьЗначениеАтрибутаКартинки(ЭлементКартинкаHTML.Атрибуты, "data-linked-resource-id");
		ИдентификаторСтраницы	= ПолучитьЗначениеАтрибутаКартинки(ЭлементКартинкаHTML.Атрибуты, "data-linked-resource-container-id");
		ТипДанныхКартинки		= ПолучитьЗначениеАтрибутаКартинки(ЭлементКартинкаHTML.Атрибуты, "data-linked-resource-content-type");
		АтрибутКлассКартинки	= ПолучитьЗначениеАтрибутаКартинки(ЭлементКартинкаHTML.Атрибуты, "class");
		
		ШиринаКартинки = ПолучитьЗначениеАтрибутаКартинки(ЭлементКартинкаHTML.Атрибуты, "data-width");
		ВысотаКартинки = ПолучитьЗначениеАтрибутаКартинки(ЭлементКартинкаHTML.Атрибуты, "data-heigh");
		
		АдресФайла = confluence_ApiClientServer.get_attachment_publiclink(Настройки, ИдентификаторСтраницы, "att" + ИдентификаторКартинки);
		Если НЕ ТипЗнч(АдресФайла) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		Для Индекс = 0 По ЭлементКартинкаHTML.Атрибуты.Количество() - 1 Цикл
			Имя = ЭлементКартинкаHTML.Атрибуты.Элемент(0).Имя;
			ЭлементКартинкаHTML.Атрибуты.УдалитьИменованныйЭлемент(Имя);
		КонецЦикла;
		
		СтильКартинки	= "";
		СтильКартинки	= СтильКартинки + ?(НЕ ЗначениеЗаполнено(ШиринаКартинки), "", СтрШаблон("width:%1;", ШиринаКартинки));
		СтильКартинки	= СтильКартинки + ?(НЕ ЗначениеЗаполнено(ШиринаКартинки), "", СтрШаблон("height:%2", ВысотаКартинки));
		АдресХранилища	= АдресФайла;
		
		ЭлементКартинкаHTML.УстановитьАтрибут("src", АдресХранилища);
		ЭлементКартинкаHTML.УстановитьАтрибут("style", СтильКартинки);
		
		ЕстьИзменения = Истина;
	КонецЦикла;
	
	Если НЕ ЕстьИзменения Тогда
		Возврат;
	КонецЕсли;

	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьDOM.Записать(ДокументHTML, ЗаписьHTML);
	
	ТекстHTML = ЗаписьHTML.Закрыть();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьЗначениеАтрибутаКартинки(знач АтрибутыHTML, знач Имя)
	АтрибутHTML = АтрибутыHTML.ПолучитьИменованныйЭлемент(Имя);
	Если ТипЗнч(АтрибутHTML) = Тип("АтрибутHTML") Тогда 
		Возврат АтрибутHTML.Значение;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ОбработатьКартинкиСтраницыНаСервере(знач Настройки, ТекстHTML)
	ОбработатьКартинкиСтраницыСлужебный(ЭтотОбъект, Настройки, ТекстHTML);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ОбменСConfluence

&НаКлиентеНаСервереБезКонтекста 
Функция ПолучитьНастройкиПодключения(Объект)
	Возврат confluence_ApiClientServer.get_connection_settings(Объект.АдресСервера,
		Объект.ПользовательЛогин,
		Объект.ПользовательТокен);
КонецФункции

&НаКлиенте 
Функция ПолучитьПространстваНаКлиенте()
	НастройкиПодключения	= ПолучитьНастройкиПодключения(Объект);
	ПараметрыЗапроса		= confluence_ApiClientServer.get_all_spaces_params(0, 0); 
	
	РезультатЗапроса = confluence_ApiClientServer.get_all_spaces(НастройкиПодключения, ПараметрыЗапроса); 
	Если confluence_ApiClientServer.check_error(РезультатЗапроса, Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса;
КонецФункции

&НаКлиенте 
Функция ПолучитьСтраницыПространстваНаКлиенте(знач ИдентификаторРодитель)
	НастройкиПодключения	= ПолучитьНастройкиПодключения(Объект);
	ПараметрыЗапроса		= confluence_ApiClientServer.get_page_child_by_type_params(0, 0);
	
	РезультатЗапроса = confluence_ApiClientServer.get_child_pages(НастройкиПодключения, ИдентификаторРодитель);
	Если confluence_ApiClientServer.check_error(РезультатЗапроса, Истина) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат РезультатЗапроса;
КонецФункции

&НаКлиенте 
Функция ПолучитьСодержимоеТекущейСтраницыНаКлиенте()
	НастройкиПодключения = ПолучитьНастройкиПодключения(Объект);
	
	ПараметрыКонтента = confluence_ApiClientServer.get_page_content_params();
	ПараметрыКонтента.Контент.body_styled_view = Истина;
	
	СтруктураКонтента = confluence_ApiClientServer.get_page_content(НастройкиПодключения, ЭтотОбъект.ТекущаяСтраницаИдентификатор, ПараметрыКонтента);
	Если confluence_ApiClientServer.check_error(СтруктураКонтента, Истина) Тогда
		Возврат "";
	КонецЕсли;
	
	ЭтотОбъект.ТекущаяСтраницаПредставление = СтруктураКонтента.Заголовок;
	ЭтотОбъект.ТекущаяСтраницаАдресСтраницы = СтруктураКонтента.Ссылки.Основа + СтруктураКонтента.Ссылки.Сокращенная;
	
	ЭтотОбъект.Вложения.Очистить();
	Для Каждого СтруктураВложение Из СтруктураКонтента.Вложения.Значения Цикл
		ОбъектФайл = Новый Файл(СтруктураВложение.Заголовок);
		
		Если СтруктураВложение.РазмерФайла > 1024*1024*1024 Тогда
			РазмерКол	= Окр(СтруктураВложение.РазмерФайла / (1024*1024*1024), 2);
			РазмерЕдИзм	= "Gb";
		ИначеЕсли СтруктураВложение.РазмерФайла > 1024*1024 Тогда
			РазмерКол	= Окр(СтруктураВложение.РазмерФайла / (1024*1024), 2);
			РазмерЕдИзм	= "Mb";
		ИначеЕсли СтруктураВложение.РазмерФайла > 1024 Тогда
			РазмерКол	= Окр(СтруктураВложение.РазмерФайла / 1024, 2);
			РазмерЕдИзм	= "Kb";
		Иначе
			РазмерКол	= СтруктураВложение.РазмерФайла;
			РазмерЕдИзм	= "b";
		КонецЕсли;
		
		СтрокаВложения = ЭтотОбъект.Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаВложения, СтруктураВложение);
		
		СтрокаВложения.НомерКартинки		= ПолучитьИндексПиктограммыФайла(ОбъектФайл.Расширение);
		СтрокаВложения.Расширение			= ОбъектФайл.Расширение;
		СтрокаВложения.РазмерФайлаСтрока	= СтрШаблон("%1 %2", Строка(РазмерКол), РазмерЕдИзм);
	КонецЦикла;
	
	ТекстHTML = СтруктураКонтента.body_styled_view;
	
	// если используем не анонимный доступ, будет проблема с картинками
	// необходимо скачать каждую картинку и подставить ее в содержимое
	
	Если НЕ ЭтоАнонимныйДоступ(Объект) Тогда
		#Если ВебКлиент Тогда
		    ОбработатьКартинкиСтраницыНаСервере(НастройкиПодключения, ТекстHTML);
		#Иначе
			ОбработатьКартинкиСтраницыСлужебный(ЭтотОбъект, НастройкиПодключения, ТекстHTML);
		#КонецЕсли		
	КонецЕсли;
	
	Возврат ТекстHTML;
КонецФункции

#КонецОбласти
 
#Область СлужебныеПроцедурыИФункции_ОткрытиеСтраниц

&НаКлиенте 
Процедура ВыполнитьПереходНаСтраницуРаздела()
	ДанныеПространства = ПолучитьДанныеСтраницыПространстваНаСервере();
	Если НЕ ПустаяСтрока(ДанныеПространства.Идентификатор) Тогда
		ВыполнитьПереходНаСтраницу(ДанныеПространства.Идентификатор, ДанныеПространства.Заголовок);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ВыполнитьПереходНаСтраницу(знач ИдентификаторСтраницы, знач Заголовок)
	Если НЕ ЗначениеЗаполнено(ИдентификаторСтраницы) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Заголовок) Тогда
		Заголовок = """" + Заголовок + """";
	КонецЕсли;
	
	ЭтотОбъект.ПолеHTML	= "";
	
	ЭтотОбъект.ТекущаяСтраницаИдентификатор = ИдентификаторСтраницы;
	ЭтотОбъект.ТекущаяСтраницаПредставление = СтрШаблон(НСтр("ru='Загрузка страницы %1...'"), Заголовок);
	
	Элементы.ТекущаяСтраницаКартинка.Картинка = БиблиотекаКартинок.confluence_Ожидание16;
	
	ЭтотОбъект.ПодключитьОбработчикОжидания("ВыполнитьПереходНаСтраницуОбработчик", 0.1, Истина);
КонецПроцедуры

&НаКлиенте 
Процедура ВыполнитьПереходНаСтраницуОбработчик()
	ТекстHTML = ПолучитьСодержимоеТекущейСтраницыНаКлиенте();
	
	Разделитель = СтрНайти(ТекстHTML, "img, fieldset {");
	Если Разделитель > 0 Тогда
		ТекстHTML = Лев(ТекстHTML, Разделитель - 1)
			+ "img, fieldset { max-width: 800px;"
			+ Сред(ТекстHTML, Разделитель + 16);
	КонецЕсли;		
	
	ЭтотОбъект.ПолеHTML = ТекстHTML;
	
	Элементы.ТекущаяСтраницаКартинка.Картинка = БиблиотекаКартинок.confluence_Успешно;
	
	УстановитьЗаголовокВложенияСтраницы(ЭтотОбъект);
	УстановитьКартинкуИзбраннаяСтраница(ЭтотОбъект);
	
	УстановитьУсловноеОформление(ЭтотОбъект, "РеквизитыРежимПоиска");
КонецПроцедуры

&НаКлиенте 
Процедура ОткрытьКартинкуВНовомОкне(знач ПутьККартинке)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПутьККартинке", ПутьККартинке);
	
	ОткрытьФорму("Обработка.confluence_БазаЗнаний.Форма.ФормаПросмотраКартинок",
		ПараметрыФормы,
		ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Поиск

&НаКлиенте 
Процедура ВыполнитьПоискНаКлиенте(знач НомерСтраницы = 1)
	
	НастройкиПодключения	= ПолучитьНастройкиПодключения(Объект);
	ПараметрыЗапроса		= confluence_ApiClientServer.cql_params();
	
	ТекстОтбора = ПолучитьТекстЗапросаПоиска(НомерСтраницы);
	
	Если НомерСтраницы <> 1 Тогда
		ПараметрыЗапроса.Начало = (НомерСтраницы - 1) * ПараметрыЗапроса.Количество + 1;
	КонецЕсли;
	
	ДанныеПоиска = confluence_ApiClientServer.cql(НастройкиПодключения, ТекстОтбора, "", ПараметрыЗапроса);
	Если confluence_ApiClientServer.check_error(ДанныеПоиска, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект.КоличествоСтраниц = Цел(ДанныеПоиска.ВсегоКоличество / ДанныеПоиска.Ограничение)
		+ ?(ДанныеПоиска.ВсегоКоличество % ДанныеПоиска.Ограничение > 0, 1, 0);
	
	СтруктураДанныеПоиска = Новый Структура("Начало, Ограничение, РазмерВыборки, ВсегоКоличество, СтрокаЗапроса, ВремяПоиска");
	ЗаполнитьЗначенияСвойств(СтруктураДанныеПоиска, ДанныеПоиска);
	
	ЭтотОбъект.ПоследнийПоиск			= Новый ФиксированнаяСтруктура(СтруктураДанныеПоиска);
	ЭтотОбъект.ТекущаяСтраницаПоиска	= НомерСтраницы;
	
	ВывестиРезультатПоискаНаФорму(ДанныеПоиска.Значения);
	ОбновитьНумерациюСтраницПоиска();
	ОбновитьИтоговуюСтатистикуПоиска();
	
	УстановитьУсловноеОформление(ЭтотОбъект, "РеквизитыРежимПоиска");
	
КонецПроцедуры

&НаКлиенте 
Процедура ВывестиРезультатПоискаНаФорму(знач МассивКонтента)
	ЭтотОбъект.РезультатПоиска.Очистить();
	
	СтрокиРезультат = Новый Массив;
	Для Каждого СтруктураРезультат Из МассивКонтента Цикл
		СтрокаТаблицы = ЭтотОбъект.РезультатПоиска.Добавить();
		СтрокаТаблицы.Идентификатор		= СтруктураРезультат.Контент.Идентификатор;
		СтрокаТаблицы.Заголовок			= СтруктураРезультат.Заголовок;
		СтрокаТаблицы.СсылкаПросмотр	= СтруктураРезультат.Ссылка;
		СтрокаТаблицы.Описание			= ПодготовитьОписание(СтруктураРезультат.Описание);
		СтрокаТаблицы.Пространство		= СтруктураРезультат.Пространство.Заголовок;
		СтрокаТаблицы.Обновлено			= Формат(СтруктураРезультат.Обновлено, "ДЛФ=DDT");
	КонецЦикла;
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьНумерациюСтраницПоиска()
	ПоискВыполнен = (ТипЗнч(ЭтотОбъект.ПоследнийПоиск) = Тип("ФиксированнаяСтруктура"));
	
	ОграничениеНумерации = 10;
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru='Страницы:  '"));
	
	Если НЕ ПоискВыполнен Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='поиск не выполнен'"),, WebЦвета.ТемноСерый));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ДекорацияПереключениеСтраниц", "Заголовок", Новый ФорматированнаяСтрока(МассивСтрок));
		
		Возврат;
	ИначеЕсли ЭтотОбъект.КоличествоСтраниц = 0 Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='совпадений не найдено'"),, WebЦвета.ТемноСерый));
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
			"ДекорацияПереключениеСтраниц", "Заголовок", Новый ФорматированнаяСтрока(МассивСтрок));
		
		Возврат;
	КонецЕсли;
	
	ШрифтЖирный = Новый Шрифт(,, Истина);
	
	НачСтраница = ЭтотОбъект.ТекущаяСтраницаПоиска - Цел(ОграничениеНумерации / 2);
	КонСтраница = ЭтотОбъект.ТекущаяСтраницаПоиска + Цел(ОграничениеНумерации / 2) - 1;
	Если НачСтраница < 1 Тогда
		КонСтраница = КонСтраница + (1 - НачСтраница);
	ИначеЕсли КонСтраница > ЭтотОбъект.КоличествоСтраниц Тогда
		НачСтраница = НачСтраница - (КонСтраница - ЭтотОбъект.КоличествоСтраниц);
	КонецЕсли;
	
	НачалоПодсчета	= Макс(НачСтраница, 1);
	КонецПодсчета	= Мин(КонСтраница, ЭтотОбъект.КоличествоСтраниц);

	#Область Первая_Предыдущая
	Если ЭтотОбъект.КоличествоСтраниц > ОграничениеНумерации Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='<<'"),,,, "ПерваяСтраница"));
		МассивСтрок.Добавить("  ");
	КонецЕсли;
	
	Если ЭтотОбъект.КоличествоСтраниц > 1 Тогда
		Если ЭтотОбъект.ТекущаяСтраницаПоиска = 1 Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='<'"),, WebЦвета.ТемноСерый,,));
		Иначе
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='<'"),,,, "ПредыдущаяСтраница"));
		КонецЕсли;
		МассивСтрок.Добавить("  ");
	КонецЕсли;
	#КонецОбласти 
	
	#Область Страницы
	Для ИндексСтраницы = НачалоПодсчета По КонецПодсчета Цикл
		СтрИндекс = Формат(ИндексСтраницы, "ЧН=0; ЧГ=");
		Если ИндексСтраницы = ЭтотОбъект.ТекущаяСтраницаПоиска Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(СтрИндекс, ШрифтЖирный,,, "Страница_" + СтрИндекс));
		Иначе 
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(СтрИндекс,,,, "Страница_" + СтрИндекс));
		КонецЕсли;
		
		МассивСтрок.Добавить("  ");
	КонецЦикла;
	#КонецОбласти 
	
	#Область Следующая_Последняя
	Если ЭтотОбъект.КоличествоСтраниц > 1 Тогда
		Если ЭтотОбъект.ТекущаяСтраницаПоиска = ЭтотОбъект.КоличествоСтраниц Тогда
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='>'"),, WebЦвета.ТемноСерый,,));
		Иначе 
			МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='>'"),,,, "СледующаяСтраница"));
		КонецЕсли;
		МассивСтрок.Добавить("  ");
	КонецЕсли;
	
	Если ЭтотОбъект.КоличествоСтраниц > ОграничениеНумерации Тогда
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='>>'"),,,, "ПоследняяСтраница"));
	КонецЕсли;
	#КонецОбласти 

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ДекорацияПереключениеСтраниц", "Заголовок", Новый ФорматированнаяСтрока(МассивСтрок));
КонецПроцедуры

&НаКлиенте 
Процедура ОбновитьИтоговуюСтатистикуПоиска()
	ПоискВыполнен = (ТипЗнч(ЭтотОбъект.ПоследнийПоиск) = Тип("ФиксированнаяСтруктура"));
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ДекорацияСтатистика", "Видимость", ПоискВыполнен И ЭтотОбъект.КоличествоСтраниц <> 0);
	
	Если НЕ ПоискВыполнен ИЛИ ЭтотОбъект.КоличествоСтраниц = 0 Тогда
		Возврат;
	КонецЕсли;

	СтрЗаголовок = СтрШаблон(НСтр("ru='Отображено %1 - %2 из %3'"),   //НСтр("ru='Отображены совпадения с %1 по %2 (всего %3)'"),
		Формат(ЭтотОбъект.ПоследнийПоиск.Начало + 1, "ЧН=0; ЧГ="),
		Формат(ЭтотОбъект.ПоследнийПоиск.Начало + ЭтотОбъект.ПоследнийПоиск.РазмерВыборки, "ЧН=0; ЧГ="),
		Формат(ЭтотОбъект.ПоследнийПоиск.ВсегоКоличество, "ЧН=0; ЧГ="));

	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,
		"ДекорацияСтатистика", "Заголовок", СтрЗаголовок);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста 
Функция ПодготовитьОписание(знач СтрокаОписание)
	СтрокаОписание = СтрЗаменить(СтрокаОписание, Символы.НПП, " ");
	СтрокаОписание = СтрЗаменить(СтрокаОписание, Символы.ПС, " ");
	СтрокаОписание = СтрЗаменить(СтрокаОписание, Символы.Таб, " ");
	СтрокаОписание = СокрЛП(СтрокаОписание);
	
	Возврат Лев(СтрокаОписание, 600) + ?(СтрДлина(СтрокаОписание) > 600, "...", "");
КонецФункции

&НаКлиенте 
Функция ПолучитьТекстЗапросаПоиска(знач НомерСтраницы)
	Если НомерСтраницы <> 1 И ТипЗнч(ЭтотОбъект.ПоследнийПоиск) = Тип("ФиксированнаяСтруктура") Тогда
		Возврат ЭтотОбъект.ПоследнийПоиск.СтрокаЗапроса;
	КонецЕсли;
	
	Отбор = Новый Массив;
	
	#Область ТипДанных
	confluence_ApiClientServer.cql_addFilterItem(Отбор,
		ПредопределенноеЗначение("Перечисление.confluence_ПоляCQL.ТипДанных"),
		ВидСравненияКомпоновкиДанных.Равно,
		ПредопределенноеЗначение("Перечисление.confluence_ТипыДанных.Статья"));
	#КонецОбласти 
	
	#Область Пространство
	Если НЕ ПустаяСтрока(Объект.КлючПространства) Тогда
		confluence_ApiClientServer.cql_addFilterItem(Отбор,
			ПредопределенноеЗначение("Перечисление.confluence_ПоляCQL.Пространство"),
			ВидСравненияКомпоновкиДанных.Равно,
			Объект.КлючПространства);
	КонецЕсли;
	#КонецОбласти 
	
	#Область ДатаСоздания
	Если ЭтотОбъект.ПериодСоздания <> 0 Тогда
		Если ЗначениеЗаполнено(ЭтотОбъект.ДатаСозданияОт) Тогда
			confluence_ApiClientServer.cql_addFilterItem(Отбор,
				ПредопределенноеЗначение("Перечисление.confluence_ПоляCQL.ДатаСоздания"),
				ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
				ЭтотОбъект.ДатаСозданияОт);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭтотОбъект.ДатаСозданияДо) Тогда
			confluence_ApiClientServer.cql_addFilterItem(Отбор,
				ПредопределенноеЗначение("Перечисление.confluence_ПоляCQL.ДатаСоздания"),
				ВидСравненияКомпоновкиДанных.Меньше,
				КонецДня(ЭтотОбъект.ДатаСозданияДо) + 1);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти 
	
	#Область ДатаИзменения
	Если ЭтотОбъект.ПериодИзменения <> 0 Тогда
		Если ЗначениеЗаполнено(ЭтотОбъект.ДатаИзмененияОт) Тогда
			confluence_ApiClientServer.cql_addFilterItem(Отбор,
				ПредопределенноеЗначение("Перечисление.confluence_ПоляCQL.ДатаИзменения"),
				ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
				ЭтотОбъект.ДатаИзмененияОт);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭтотОбъект.ДатаИзмененияДо) Тогда
			confluence_ApiClientServer.cql_addFilterItem(Отбор,
				ПредопределенноеЗначение("Перечисление.confluence_ПоляCQL.ДатаИзменения"),
				ВидСравненияКомпоновкиДанных.Меньше,
				КонецДня(ЭтотОбъект.ДатаИзмененияДо) + 1);
		КонецЕсли;
	КонецЕсли;
	#КонецОбласти 
	
	#Область ВИерархии
	МассивСтраниц = Новый Массив;
	Если ЭтотОбъект.ПоискВнутриТекущейИерархии Тогда
		МассивСтраниц.Добавить(ЭтотОбъект.ТекущаяСтраницаИдентификатор);
	ИначеЕсли Объект.ДоступныеСтраницы.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы Из Объект.ДоступныеСтраницы Цикл
			МассивСтраниц.Добавить(СтрокаТаблицы.Идентификатор);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивСтраниц.Количество() > 0 Тогда
		Если МассивСтраниц.Количество() = 1 Тогда
			Условие 	= ВидСравненияКомпоновкиДанных.Равно;
			Значение	= МассивСтраниц[0];
		Иначе 
			Условие		= ВидСравненияКомпоновкиДанных.ВСписке;
			Значение	= МассивСтраниц;
		КонецЕсли;
		
		confluence_ApiClientServer.cql_addFilterItem(Отбор,
			ПредопределенноеЗначение("Перечисление.confluence_ПоляCQL.ВИерархии"),
			Условие,
			Значение);
	КонецЕсли;
	#КонецОбласти 
	
	#Область Заголовок_Текст
	ПоискЗаголовок = confluence_ApiClientServer.cql_filterItem(
		ПредопределенноеЗначение("Перечисление.confluence_ПоляCQL.Заголовок"),
		ВидСравненияКомпоновкиДанных.Содержит,
		ЭтотОбъект.СтрокаПоиска); 
	
	ПоискТекст = confluence_ApiClientServer.cql_filterItem(
		ПредопределенноеЗначение("Перечисление.confluence_ПоляCQL.Текст"),
		ВидСравненияКомпоновкиДанных.Содержит,
		ЭтотОбъект.СтрокаПоиска); 
	
	Если ЭтотОбъект.ПоискТолькоПоЗаголовкам Тогда
		Отбор.Добавить(ПоискЗаголовок);
	Иначе 
		ГруппаИЛИ = confluence_ApiClientServer.cql_filterGroup(Истина);
		ГруппаИЛИ.Элементы.Добавить(ПоискЗаголовок);
		ГруппаИЛИ.Элементы.Добавить(ПоискТекст);
		
		Отбор.Добавить(ГруппаИЛИ);
	КонецЕсли;
	#КонецОбласти 
	
	ТекстЗапроса = confluence_ApiClientServer.get_cql_filter_text(Отбор); 
	Если ЭтотОбъект.ФормаВРежимеОтладки = Истина Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("CQL: " + ТекстЗапроса);
	КонецЕсли;
	
	Возврат ТекстЗапроса; 
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Раздел
#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ЭкспортPDF

&НаКлиенте 
Процедура ЭкспортСтатьиPDFНаКлиенте(знач ПутьКФайлу)
	НастройкиПодключения = ПолучитьНастройкиПодключения(Объект);
	
	Результат = confluence_ApiClientServer.get_page_as_pdf(НастройкиПодключения,
		ЭтотОбъект.ТекущаяСтраницаИдентификатор);
		
	Если НЕ ТипЗнч(Результат) = Тип("ДвоичныеДанные") Тогда
		confluence_ApiClientServer.check_error(Результат, Ложь);
	КонецЕсли;
	
	Результат.Записать(ПутьКФайлу);
	
	Оповещение = ПолучитьОповещениеОткрытьФайл(ПутьКФайлу);
	
	ПоказатьОповещениеПользователя(НСтр("ru='Запись выполнена'"),
		Оповещение,
		НСтр("ru='Файл PDF сохранен. Нажмите для открытия'"),
		БиблиотекаКартинок.Информация);
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортСтатьиPDFВФонеЗавершение(Результат, ДопПараметры) Экспорт	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='При выполнении операции произошла ошибка:
			|%1;
			|%2'"),
			Результат.КраткоеПредставлениеОшибки,
			Результат.ПодробноеПредставлениеОшибки);
			
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения); 
	КонецЕсли;
	
	Если НЕ Результат.Статус = "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеРезультата = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	Если НЕ ТипЗнч(ДанныеРезультата) = Тип("ДвоичныеДанные") Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(НСтр("ru='При подготовке файла PDF произошла ошибка. Попробуйте еще раз'"));
		Возврат;
	КонецЕсли;
	
	ДанныеРезультата.Записать(ДопПараметры.ПутьКФайлу);
	
	Оповещение = ПолучитьОповещениеОткрытьФайл(ДопПараметры.ПутьКФайлу);
	
	ПоказатьОповещениеПользователя(НСтр("ru='Запись выполнена'"),
		Оповещение,
		НСтр("ru='Файл PDF сохранен. Нажмите для открытия'"),
		БиблиотекаКартинок.Информация);
КонецПроцедуры

&НаКлиенте 
Процедура ЭкспортСтатьиPDFВФонеНаКлиенте(знач ПутьКФайлу)
	НастройкиПодключения = ПолучитьНастройкиПодключения(Объект);

	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Настройки"	, НастройкиПодключения);
	ПараметрыПроцедуры.Вставить("СтраницаИД", ЭтотОбъект.ТекущаяСтраницаИдентификатор);
	
	ДлительнаяОперация = ЭкспортСтатьиPDFВФонеНаСервере(ЭтотОбъект.УникальныйИдентификатор,
		ПараметрыПроцедуры,
		ЭтотОбъект.ФормаВРежимеОтладки);
		
	ПараметрыОповещения	= Новый Структура("ПутьКФайлу", ПутьКФайлу);
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭкспортСтатьиPDFВФонеЗавершение", ЭтотОбъект, ПараметрыОповещения);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения				= НСтр("ru='Экспорт статьи в формат PDF...'");
	ПараметрыОжидания.ВыводитьОкноОжидания			= Истина;
	ПараметрыОжидания.ВыводитьПрогрессВыполнения	= Истина;
		
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация,
		ОписаниеОповещения,
		ПараметрыОжидания);
КонецПроцедуры

&НаСервереБезКонтекста 
Функция ЭкспортСтатьиPDFВФонеНаСервере(знач ИдентификаторФормы, знач ПараметрыПроцедуры, знач РежимОтладки = Ложь)
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.ЗапуститьВФоне		= НЕ РежимОтладки;
	ПараметрыВыполнения.ЗапуститьНеВФоне	= РежимОтладки;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.confluence_БазаЗнаний.ЭкспортСтатьиPDFВФоне",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
КонецФункции

#КонецОбласти
